
Smart Servo Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d00  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e3c  08004e3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004e3c  08004e3c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e3c  08004e3c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000010  08004e58  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08004e58  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fce6  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a6  00000000  00000000  0002fd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00032108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4c  00000000  00000000  00032f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a15c  00000000  00000000  00033adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104f5  00000000  00000000  0004dc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e0e2  00000000  00000000  0005e12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000406c  00000000  00000000  000ec210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000f027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004df8 	.word	0x08004df8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004df8 	.word	0x08004df8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2uiz>:
 800093c:	004a      	lsls	r2, r1, #1
 800093e:	d211      	bcs.n	8000964 <__aeabi_d2uiz+0x28>
 8000940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000944:	d211      	bcs.n	800096a <__aeabi_d2uiz+0x2e>
 8000946:	d50d      	bpl.n	8000964 <__aeabi_d2uiz+0x28>
 8000948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800094c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000950:	d40e      	bmi.n	8000970 <__aeabi_d2uiz+0x34>
 8000952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800095a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095e:	fa23 f002 	lsr.w	r0, r3, r2
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096e:	d102      	bne.n	8000976 <__aeabi_d2uiz+0x3a>
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	4770      	bx	lr
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	4770      	bx	lr

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_frsub>:
 8000a1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a20:	e002      	b.n	8000a28 <__addsf3>
 8000a22:	bf00      	nop

08000a24 <__aeabi_fsub>:
 8000a24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a28 <__addsf3>:
 8000a28:	0042      	lsls	r2, r0, #1
 8000a2a:	bf1f      	itttt	ne
 8000a2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a30:	ea92 0f03 	teqne	r2, r3
 8000a34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3c:	d06a      	beq.n	8000b14 <__addsf3+0xec>
 8000a3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a46:	bfc1      	itttt	gt
 8000a48:	18d2      	addgt	r2, r2, r3
 8000a4a:	4041      	eorgt	r1, r0
 8000a4c:	4048      	eorgt	r0, r1
 8000a4e:	4041      	eorgt	r1, r0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	2b19      	cmp	r3, #25
 8000a56:	bf88      	it	hi
 8000a58:	4770      	bxhi	lr
 8000a5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a76:	bf18      	it	ne
 8000a78:	4249      	negne	r1, r1
 8000a7a:	ea92 0f03 	teq	r2, r3
 8000a7e:	d03f      	beq.n	8000b00 <__addsf3+0xd8>
 8000a80:	f1a2 0201 	sub.w	r2, r2, #1
 8000a84:	fa41 fc03 	asr.w	ip, r1, r3
 8000a88:	eb10 000c 	adds.w	r0, r0, ip
 8000a8c:	f1c3 0320 	rsb	r3, r3, #32
 8000a90:	fa01 f103 	lsl.w	r1, r1, r3
 8000a94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a98:	d502      	bpl.n	8000aa0 <__addsf3+0x78>
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aa0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aa4:	d313      	bcc.n	8000ace <__addsf3+0xa6>
 8000aa6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aaa:	d306      	bcc.n	8000aba <__addsf3+0x92>
 8000aac:	0840      	lsrs	r0, r0, #1
 8000aae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ab2:	f102 0201 	add.w	r2, r2, #1
 8000ab6:	2afe      	cmp	r2, #254	; 0xfe
 8000ab8:	d251      	bcs.n	8000b5e <__addsf3+0x136>
 8000aba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000abe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ac2:	bf08      	it	eq
 8000ac4:	f020 0001 	biceq.w	r0, r0, #1
 8000ac8:	ea40 0003 	orr.w	r0, r0, r3
 8000acc:	4770      	bx	lr
 8000ace:	0049      	lsls	r1, r1, #1
 8000ad0:	eb40 0000 	adc.w	r0, r0, r0
 8000ad4:	3a01      	subs	r2, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000adc:	d2ed      	bcs.n	8000aba <__addsf3+0x92>
 8000ade:	fab0 fc80 	clz	ip, r0
 8000ae2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ae6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aee:	bfaa      	itet	ge
 8000af0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000af4:	4252      	neglt	r2, r2
 8000af6:	4318      	orrge	r0, r3
 8000af8:	bfbc      	itt	lt
 8000afa:	40d0      	lsrlt	r0, r2
 8000afc:	4318      	orrlt	r0, r3
 8000afe:	4770      	bx	lr
 8000b00:	f092 0f00 	teq	r2, #0
 8000b04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b08:	bf06      	itte	eq
 8000b0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b0e:	3201      	addeq	r2, #1
 8000b10:	3b01      	subne	r3, #1
 8000b12:	e7b5      	b.n	8000a80 <__addsf3+0x58>
 8000b14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	bf18      	it	ne
 8000b1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b22:	d021      	beq.n	8000b68 <__addsf3+0x140>
 8000b24:	ea92 0f03 	teq	r2, r3
 8000b28:	d004      	beq.n	8000b34 <__addsf3+0x10c>
 8000b2a:	f092 0f00 	teq	r2, #0
 8000b2e:	bf08      	it	eq
 8000b30:	4608      	moveq	r0, r1
 8000b32:	4770      	bx	lr
 8000b34:	ea90 0f01 	teq	r0, r1
 8000b38:	bf1c      	itt	ne
 8000b3a:	2000      	movne	r0, #0
 8000b3c:	4770      	bxne	lr
 8000b3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b42:	d104      	bne.n	8000b4e <__addsf3+0x126>
 8000b44:	0040      	lsls	r0, r0, #1
 8000b46:	bf28      	it	cs
 8000b48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	4770      	bx	lr
 8000b4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b52:	bf3c      	itt	cc
 8000b54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bxcc	lr
 8000b5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	4770      	bx	lr
 8000b68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b6c:	bf16      	itet	ne
 8000b6e:	4608      	movne	r0, r1
 8000b70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b74:	4601      	movne	r1, r0
 8000b76:	0242      	lsls	r2, r0, #9
 8000b78:	bf06      	itte	eq
 8000b7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b7e:	ea90 0f01 	teqeq	r0, r1
 8000b82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_ui2f>:
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	e004      	b.n	8000b98 <__aeabi_i2f+0x8>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_i2f>:
 8000b90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	bf48      	it	mi
 8000b96:	4240      	negmi	r0, r0
 8000b98:	ea5f 0c00 	movs.w	ip, r0
 8000b9c:	bf08      	it	eq
 8000b9e:	4770      	bxeq	lr
 8000ba0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	e01c      	b.n	8000be6 <__aeabi_l2f+0x2a>

08000bac <__aeabi_ul2f>:
 8000bac:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	e00a      	b.n	8000bd0 <__aeabi_l2f+0x14>
 8000bba:	bf00      	nop

08000bbc <__aeabi_l2f>:
 8000bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc0:	bf08      	it	eq
 8000bc2:	4770      	bxeq	lr
 8000bc4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__aeabi_l2f+0x14>
 8000bca:	4240      	negs	r0, r0
 8000bcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd0:	ea5f 0c01 	movs.w	ip, r1
 8000bd4:	bf02      	ittt	eq
 8000bd6:	4684      	moveq	ip, r0
 8000bd8:	4601      	moveq	r1, r0
 8000bda:	2000      	moveq	r0, #0
 8000bdc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000be0:	bf08      	it	eq
 8000be2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000be6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bea:	fabc f28c 	clz	r2, ip
 8000bee:	3a08      	subs	r2, #8
 8000bf0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bf4:	db10      	blt.n	8000c18 <__aeabi_l2f+0x5c>
 8000bf6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f102 0220 	add.w	r2, r2, #32
 8000c1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c20:	f1c2 0220 	rsb	r2, r2, #32
 8000c24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c28:	fa21 f202 	lsr.w	r2, r1, r2
 8000c2c:	eb43 0002 	adc.w	r0, r3, r2
 8000c30:	bf08      	it	eq
 8000c32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_fmul>:
 8000c38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c40:	bf1e      	ittt	ne
 8000c42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c46:	ea92 0f0c 	teqne	r2, ip
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d06f      	beq.n	8000d30 <__aeabi_fmul+0xf8>
 8000c50:	441a      	add	r2, r3
 8000c52:	ea80 0c01 	eor.w	ip, r0, r1
 8000c56:	0240      	lsls	r0, r0, #9
 8000c58:	bf18      	it	ne
 8000c5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c5e:	d01e      	beq.n	8000c9e <__aeabi_fmul+0x66>
 8000c60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c78:	bf3e      	ittt	cc
 8000c7a:	0049      	lslcc	r1, r1, #1
 8000c7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c80:	005b      	lslcc	r3, r3, #1
 8000c82:	ea40 0001 	orr.w	r0, r0, r1
 8000c86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c8a:	2afd      	cmp	r2, #253	; 0xfd
 8000c8c:	d81d      	bhi.n	8000cca <__aeabi_fmul+0x92>
 8000c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	4770      	bx	lr
 8000c9e:	f090 0f00 	teq	r0, #0
 8000ca2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ca6:	bf08      	it	eq
 8000ca8:	0249      	lsleq	r1, r1, #9
 8000caa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cb2:	3a7f      	subs	r2, #127	; 0x7f
 8000cb4:	bfc2      	ittt	gt
 8000cb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cbe:	4770      	bxgt	lr
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	dc5d      	bgt.n	8000d88 <__aeabi_fmul+0x150>
 8000ccc:	f112 0f19 	cmn.w	r2, #25
 8000cd0:	bfdc      	itt	le
 8000cd2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cd6:	4770      	bxle	lr
 8000cd8:	f1c2 0200 	rsb	r2, r2, #0
 8000cdc:	0041      	lsls	r1, r0, #1
 8000cde:	fa21 f102 	lsr.w	r1, r1, r2
 8000ce2:	f1c2 0220 	rsb	r2, r2, #32
 8000ce6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cee:	f140 0000 	adc.w	r0, r0, #0
 8000cf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cf6:	bf08      	it	eq
 8000cf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cfc:	4770      	bx	lr
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0040      	lsleq	r0, r0, #1
 8000d0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d0e:	3a01      	subeq	r2, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fmul+0xce>
 8000d12:	ea40 000c 	orr.w	r0, r0, ip
 8000d16:	f093 0f00 	teq	r3, #0
 8000d1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0049      	lsleq	r1, r1, #1
 8000d22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d26:	3b01      	subeq	r3, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fmul+0xe6>
 8000d2a:	ea41 010c 	orr.w	r1, r1, ip
 8000d2e:	e78f      	b.n	8000c50 <__aeabi_fmul+0x18>
 8000d30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d34:	ea92 0f0c 	teq	r2, ip
 8000d38:	bf18      	it	ne
 8000d3a:	ea93 0f0c 	teqne	r3, ip
 8000d3e:	d00a      	beq.n	8000d56 <__aeabi_fmul+0x11e>
 8000d40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d44:	bf18      	it	ne
 8000d46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d4a:	d1d8      	bne.n	8000cfe <__aeabi_fmul+0xc6>
 8000d4c:	ea80 0001 	eor.w	r0, r0, r1
 8000d50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d54:	4770      	bx	lr
 8000d56:	f090 0f00 	teq	r0, #0
 8000d5a:	bf17      	itett	ne
 8000d5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d60:	4608      	moveq	r0, r1
 8000d62:	f091 0f00 	teqne	r1, #0
 8000d66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d6a:	d014      	beq.n	8000d96 <__aeabi_fmul+0x15e>
 8000d6c:	ea92 0f0c 	teq	r2, ip
 8000d70:	d101      	bne.n	8000d76 <__aeabi_fmul+0x13e>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d10f      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d76:	ea93 0f0c 	teq	r3, ip
 8000d7a:	d103      	bne.n	8000d84 <__aeabi_fmul+0x14c>
 8000d7c:	024b      	lsls	r3, r1, #9
 8000d7e:	bf18      	it	ne
 8000d80:	4608      	movne	r0, r1
 8000d82:	d108      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d84:	ea80 0001 	eor.w	r0, r0, r1
 8000d88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bx	lr
 8000d96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d9e:	4770      	bx	lr

08000da0 <__aeabi_fdiv>:
 8000da0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da8:	bf1e      	ittt	ne
 8000daa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dae:	ea92 0f0c 	teqne	r2, ip
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d069      	beq.n	8000e8c <__aeabi_fdiv+0xec>
 8000db8:	eba2 0203 	sub.w	r2, r2, r3
 8000dbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc0:	0249      	lsls	r1, r1, #9
 8000dc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dc6:	d037      	beq.n	8000e38 <__aeabi_fdiv+0x98>
 8000dc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	bf38      	it	cc
 8000ddc:	005b      	lslcc	r3, r3, #1
 8000dde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000de2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000de6:	428b      	cmp	r3, r1
 8000de8:	bf24      	itt	cs
 8000dea:	1a5b      	subcs	r3, r3, r1
 8000dec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000df0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000df4:	bf24      	itt	cs
 8000df6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e02:	bf24      	itt	cs
 8000e04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e10:	bf24      	itt	cs
 8000e12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e22:	d1e0      	bne.n	8000de6 <__aeabi_fdiv+0x46>
 8000e24:	2afd      	cmp	r2, #253	; 0xfd
 8000e26:	f63f af50 	bhi.w	8000cca <__aeabi_fmul+0x92>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e30:	bf08      	it	eq
 8000e32:	f020 0001 	biceq.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e40:	327f      	adds	r2, #127	; 0x7f
 8000e42:	bfc2      	ittt	gt
 8000e44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4c:	4770      	bxgt	lr
 8000e4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	3a01      	subs	r2, #1
 8000e58:	e737      	b.n	8000cca <__aeabi_fmul+0x92>
 8000e5a:	f092 0f00 	teq	r2, #0
 8000e5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0040      	lsleq	r0, r0, #1
 8000e66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6a:	3a01      	subeq	r2, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fdiv+0xc2>
 8000e6e:	ea40 000c 	orr.w	r0, r0, ip
 8000e72:	f093 0f00 	teq	r3, #0
 8000e76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0049      	lsleq	r1, r1, #1
 8000e7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e82:	3b01      	subeq	r3, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fdiv+0xda>
 8000e86:	ea41 010c 	orr.w	r1, r1, ip
 8000e8a:	e795      	b.n	8000db8 <__aeabi_fdiv+0x18>
 8000e8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	d108      	bne.n	8000ea8 <__aeabi_fdiv+0x108>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	f47f af7d 	bne.w	8000d96 <__aeabi_fmul+0x15e>
 8000e9c:	ea93 0f0c 	teq	r3, ip
 8000ea0:	f47f af70 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e776      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_fdiv+0x118>
 8000eae:	024b      	lsls	r3, r1, #9
 8000eb0:	f43f af4c 	beq.w	8000d4c <__aeabi_fmul+0x114>
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	e76e      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000eb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ebc:	bf18      	it	ne
 8000ebe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec2:	d1ca      	bne.n	8000e5a <__aeabi_fdiv+0xba>
 8000ec4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ec8:	f47f af5c 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ecc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ed0:	f47f af3c 	bne.w	8000d4c <__aeabi_fmul+0x114>
 8000ed4:	e75f      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ed6:	bf00      	nop

08000ed8 <__gesf2>:
 8000ed8:	f04f 3cff 	mov.w	ip, #4294967295
 8000edc:	e006      	b.n	8000eec <__cmpsf2+0x4>
 8000ede:	bf00      	nop

08000ee0 <__lesf2>:
 8000ee0:	f04f 0c01 	mov.w	ip, #1
 8000ee4:	e002      	b.n	8000eec <__cmpsf2+0x4>
 8000ee6:	bf00      	nop

08000ee8 <__cmpsf2>:
 8000ee8:	f04f 0c01 	mov.w	ip, #1
 8000eec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ef0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	bf18      	it	ne
 8000efe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f02:	d011      	beq.n	8000f28 <__cmpsf2+0x40>
 8000f04:	b001      	add	sp, #4
 8000f06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f0a:	bf18      	it	ne
 8000f0c:	ea90 0f01 	teqne	r0, r1
 8000f10:	bf58      	it	pl
 8000f12:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f16:	bf88      	it	hi
 8000f18:	17c8      	asrhi	r0, r1, #31
 8000f1a:	bf38      	it	cc
 8000f1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f20:	bf18      	it	ne
 8000f22:	f040 0001 	orrne.w	r0, r0, #1
 8000f26:	4770      	bx	lr
 8000f28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f2c:	d102      	bne.n	8000f34 <__cmpsf2+0x4c>
 8000f2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f32:	d105      	bne.n	8000f40 <__cmpsf2+0x58>
 8000f34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f38:	d1e4      	bne.n	8000f04 <__cmpsf2+0x1c>
 8000f3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f3e:	d0e1      	beq.n	8000f04 <__cmpsf2+0x1c>
 8000f40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <__aeabi_cfrcmple>:
 8000f48:	4684      	mov	ip, r0
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	4661      	mov	r1, ip
 8000f4e:	e7ff      	b.n	8000f50 <__aeabi_cfcmpeq>

08000f50 <__aeabi_cfcmpeq>:
 8000f50:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f52:	f7ff ffc9 	bl	8000ee8 <__cmpsf2>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	bf48      	it	mi
 8000f5a:	f110 0f00 	cmnmi.w	r0, #0
 8000f5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f60 <__aeabi_fcmpeq>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff fff4 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f68:	bf0c      	ite	eq
 8000f6a:	2001      	moveq	r0, #1
 8000f6c:	2000      	movne	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmplt>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffea 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f7c:	bf34      	ite	cc
 8000f7e:	2001      	movcc	r0, #1
 8000f80:	2000      	movcs	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmple>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffe0 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f90:	bf94      	ite	ls
 8000f92:	2001      	movls	r0, #1
 8000f94:	2000      	movhi	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmpge>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffd2 	bl	8000f48 <__aeabi_cfrcmple>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpgt>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffc8 	bl	8000f48 <__aeabi_cfrcmple>
 8000fb8:	bf34      	ite	cc
 8000fba:	2001      	movcc	r0, #1
 8000fbc:	2000      	movcs	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_f2iz>:
 8000fc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fcc:	d30f      	bcc.n	8000fee <__aeabi_f2iz+0x2a>
 8000fce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fd6:	d90d      	bls.n	8000ff4 <__aeabi_f2iz+0x30>
 8000fd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fe4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe8:	bf18      	it	ne
 8000fea:	4240      	negne	r0, r0
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr
 8000ff4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ff8:	d101      	bne.n	8000ffe <__aeabi_f2iz+0x3a>
 8000ffa:	0242      	lsls	r2, r0, #9
 8000ffc:	d105      	bne.n	800100a <__aeabi_f2iz+0x46>
 8000ffe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001002:	bf08      	it	eq
 8001004:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr

08001010 <_ZN6AS5600C1EP17I2C_HandleTypeDefhNS_18ROTATION_DIRECTIONEm>:
 * @param device_address	Address of the I2C device;
 * @param direction			Rotation direction for upward counting;
 * @param response_delay	Time to wait for the device response;
 *
 */
AS5600::AS5600(
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	460b      	mov	r3, r1
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	4613      	mov	r3, r2
 8001024:	71bb      	strb	r3, [r7, #6]
uint8_t device_address,
AS5600::ROTATION_DIRECTION direction,
uint32_t response_delay
) :
		I2C_Device(device_handle, device_address, response_delay),
		_direction(direction)
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	79fa      	ldrb	r2, [r7, #7]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	f000 fa41 	bl	80014b4 <_ZN10I2C_DeviceC1EP17I2C_HandleTypeDefhm>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	79ba      	ldrb	r2, [r7, #6]
 8001036:	731a      	strb	r2, [r3, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2203      	movs	r2, #3
 800103c:	771a      	strb	r2, [r3, #28]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	220c      	movs	r2, #12
 8001042:	775a      	strb	r2, [r3, #29]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2230      	movs	r2, #48	; 0x30
 8001048:	779a      	strb	r2, [r3, #30]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	22c0      	movs	r2, #192	; 0xc0
 800104e:	77da      	strb	r2, [r3, #31]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2203      	movs	r2, #3
 8001054:	f883 2020 	strb.w	r2, [r3, #32]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	221c      	movs	r2, #28
 800105c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2220      	movs	r2, #32
 8001064:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2208      	movs	r2, #8
 800106c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2210      	movs	r2, #16
 8001074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2220      	movs	r2, #32
 800107c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4a35      	ldr	r2, [pc, #212]	; (8001158 <_ZN6AS5600C1EP17I2C_HandleTypeDefhNS_18ROTATION_DIRECTIONEm+0x148>)
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	4619      	mov	r1, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fccb 	bl	8000a28 <__addsf3>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	62da      	str	r2, [r3, #44]	; 0x2c
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4a2f      	ldr	r2, [pc, #188]	; (800115c <_ZN6AS5600C1EP17I2C_HandleTypeDefhNS_18ROTATION_DIRECTIONEm+0x14c>)
 800109e:	631a      	str	r2, [r3, #48]	; 0x30
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4a2f      	ldr	r2, [pc, #188]	; (8001160 <_ZN6AS5600C1EP17I2C_HandleTypeDefhNS_18ROTATION_DIRECTIONEm+0x150>)
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff f9b4 	bl	8000418 <__aeabi_f2d>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	f7ff f852 	bl	800015c <__adddf3>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <_ZN6AS5600C1EP17I2C_HandleTypeDefhNS_18ROTATION_DIRECTIONEm+0x154>)
 80010c6:	f7ff fb29 	bl	800071c <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fc53 	bl	800097c <__aeabi_d2f>
 80010d6:	4602      	mov	r2, r0
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	639a      	str	r2, [r3, #56]	; 0x38
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f999 	bl	8000418 <__aeabi_f2d>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	f7ff f837 	bl	800015c <__adddf3>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	491b      	ldr	r1, [pc, #108]	; (8001164 <_ZN6AS5600C1EP17I2C_HandleTypeDefhNS_18ROTATION_DIRECTIONEm+0x154>)
 80010f8:	f7ff fb10 	bl	800071c <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fc3a 	bl	800097c <__aeabi_d2f>
 8001108:	4602      	mov	r2, r0
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	63da      	str	r2, [r3, #60]	; 0x3c
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	4619      	mov	r1, r3
 8001114:	4814      	ldr	r0, [pc, #80]	; (8001168 <_ZN6AS5600C1EP17I2C_HandleTypeDefhNS_18ROTATION_DIRECTIONEm+0x158>)
 8001116:	f7ff fe43 	bl	8000da0 <__aeabi_fdiv>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	4910      	ldr	r1, [pc, #64]	; (8001168 <_ZN6AS5600C1EP17I2C_HandleTypeDefhNS_18ROTATION_DIRECTIONEm+0x158>)
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fe39 	bl	8000da0 <__aeabi_fdiv>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	645a      	str	r2, [r3, #68]	; 0x44
	{
		AS5600::_previous_angle = AS5600::getAngle();
 8001136:	2101      	movs	r1, #1
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f000 f834 	bl	80011a6 <_ZN6AS56008getAngleENS_17OUTPUT_ANGLE_UNITE>
 800113e:	4602      	mov	r2, r0
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	611a      	str	r2, [r3, #16]
		AS5600::_turns = -1;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f04f 32ff 	mov.w	r2, #4294967295
 800114a:	619a      	str	r2, [r3, #24]
	}
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40490fdb 	.word	0x40490fdb
 800115c:	3db40000 	.word	0x3db40000
 8001160:	41360b61 	.word	0x41360b61
 8001164:	40b00000 	.word	0x40b00000
 8001168:	43340000 	.word	0x43340000

0800116c <_ZN6AS560011getRawAngleEv>:

/*
 * @brief Gets the content of the angle register (filtered position in ADC format).
 *
 */
uint16_t AS5600::getRawAngle(void){
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	// Read the register
	uint16_t register_content;
	AS5600::LLR_16Bits(AS5600::ANGLE_H, &register_content);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f107 020e 	add.w	r2, r7, #14
 800117a:	210e      	movs	r1, #14
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f9b2 	bl	80014e6 <_ZN10I2C_Device10LLR_16BitsEhPt>

	// If direction is counter clock wise reverse the value
	if(AS5600::_direction == AS5600::COUNTERCLOCK_WISE) return (0x0FFF - register_content) & 0x0FFF;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7b1b      	ldrb	r3, [r3, #12]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d108      	bne.n	800119c <_ZN6AS560011getRawAngleEv+0x30>
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001190:	330f      	adds	r3, #15
 8001192:	b29b      	uxth	r3, r3
 8001194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001198:	b29b      	uxth	r3, r3
 800119a:	e000      	b.n	800119e <_ZN6AS560011getRawAngleEv+0x32>

	// Return result
	return register_content;
 800119c:	89fb      	ldrh	r3, [r7, #14]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_ZN6AS56008getAngleENS_17OUTPUT_ANGLE_UNITE>:
 * @brief Returns the sensed position in degrees or radians.
 *
 * @param unit	Unit of measure of the output value;
 *
 */
float AS5600::getAngle(AS5600::OUTPUT_ANGLE_UNIT unit){
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	70fb      	strb	r3, [r7, #3]
	// Get the ADC value
	uint16_t angle = AS5600::getRawAngle();
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffda 	bl	800116c <_ZN6AS560011getRawAngleEv>
 80011b8:	4603      	mov	r3, r0
 80011ba:	81fb      	strh	r3, [r7, #14]

	// Update angle state variable
	float result = angle * AS5600::ADC_TO_RAD;
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fce6 	bl	8000b90 <__aeabi_i2f>
 80011c4:	4602      	mov	r2, r0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f7ff fd33 	bl	8000c38 <__aeabi_fmul>
 80011d2:	4603      	mov	r3, r0
 80011d4:	60bb      	str	r3, [r7, #8]

	// If the output unit is degrees, convert
	if(AS5600::DEG == unit) return result * AS5600::RAD_TO_DEG;
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d107      	bne.n	80011ec <_ZN6AS56008getAngleENS_17OUTPUT_ANGLE_UNITE+0x46>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fd28 	bl	8000c38 <__aeabi_fmul>
 80011e8:	4603      	mov	r3, r0
 80011ea:	e000      	b.n	80011ee <_ZN6AS56008getAngleENS_17OUTPUT_ANGLE_UNITE+0x48>

	// Return result in radians
	return result;
 80011ec:	68bb      	ldr	r3, [r7, #8]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_ZN6AS560017getUnwrappedAngleENS_17OUTPUT_ANGLE_UNITE>:

float AS5600::getUnwrappedAngle(AS5600::OUTPUT_ANGLE_UNIT unit){
 80011f6:	b590      	push	{r4, r7, lr}
 80011f8:	b087      	sub	sp, #28
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	70fb      	strb	r3, [r7, #3]
	// Compute necessary values
	float current_angle = AS5600::getAngle();
 8001202:	2101      	movs	r1, #1
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ffce 	bl	80011a6 <_ZN6AS56008getAngleENS_17OUTPUT_ANGLE_UNITE>
 800120a:	6178      	str	r0, [r7, #20]
	float gap = AS5600::_previous_angle - current_angle;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	6979      	ldr	r1, [r7, #20]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fc06 	bl	8000a24 <__aeabi_fsub>
 8001218:	4603      	mov	r3, r0
 800121a:	613b      	str	r3, [r7, #16]
	int8_t sign = round(gap / abs(gap));
 800121c:	6938      	ldr	r0, [r7, #16]
 800121e:	f7ff fed1 	bl	8000fc4 <__aeabi_f2iz>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	bfb8      	it	lt
 8001228:	425b      	neglt	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fcb0 	bl	8000b90 <__aeabi_i2f>
 8001230:	4603      	mov	r3, r0
 8001232:	4619      	mov	r1, r3
 8001234:	6938      	ldr	r0, [r7, #16]
 8001236:	f7ff fdb3 	bl	8000da0 <__aeabi_fdiv>
 800123a:	4603      	mov	r3, r0
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f8eb 	bl	8000418 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f003 fd63 	bl	8004d14 <round>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fb49 	bl	80008ec <__aeabi_d2iz>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]

	// Update angle state variable
	AS5600::_previous_angle = current_angle;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	611a      	str	r2, [r3, #16]

	// If the gap is bigger than threshold, increment/decrement turns
	if(AS5600::PI <= abs(gap)) AS5600::_turns += sign;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001268:	6938      	ldr	r0, [r7, #16]
 800126a:	f7ff feab 	bl	8000fc4 <__aeabi_f2iz>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	bfb8      	it	lt
 8001274:	425b      	neglt	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fc8a 	bl	8000b90 <__aeabi_i2f>
 800127c:	4603      	mov	r3, r0
 800127e:	4619      	mov	r1, r3
 8001280:	4620      	mov	r0, r4
 8001282:	f7ff fe81 	bl	8000f88 <__aeabi_fcmple>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <_ZN6AS560017getUnwrappedAngleENS_17OUTPUT_ANGLE_UNITE+0xa4>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	699a      	ldr	r2, [r3, #24]
 8001290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001294:	441a      	add	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]

	// Compute total angle
	float result = current_angle + AS5600::_turns * AS5600::FULL_TURN;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fc76 	bl	8000b90 <__aeabi_i2f>
 80012a4:	4602      	mov	r2, r0
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	4619      	mov	r1, r3
 80012ac:	4610      	mov	r0, r2
 80012ae:	f7ff fcc3 	bl	8000c38 <__aeabi_fmul>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4619      	mov	r1, r3
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff fbb6 	bl	8000a28 <__addsf3>
 80012bc:	4603      	mov	r3, r0
 80012be:	60bb      	str	r3, [r7, #8]
	AS5600::_cumulative_angle = result;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	615a      	str	r2, [r3, #20]

	// If the output unit is degrees, convert
	if(AS5600::DEG == unit) return result * AS5600::RAD_TO_DEG;
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d107      	bne.n	80012dc <_ZN6AS560017getUnwrappedAngleENS_17OUTPUT_ANGLE_UNITE+0xe6>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fcb0 	bl	8000c38 <__aeabi_fmul>
 80012d8:	4603      	mov	r3, r0
 80012da:	e000      	b.n	80012de <_ZN6AS560017getUnwrappedAngleENS_17OUTPUT_ANGLE_UNITE+0xe8>

	// Return result in radians
	return result;
 80012dc:	68bb      	ldr	r3, [r7, #8]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	371c      	adds	r7, #28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}

080012e6 <_ZN6INA219C1EP17I2C_HandleTypeDefffhm>:
 * @oaram shunt_resistor 		Value of shunt resistor used to measure current;
 * @param device_address		Address of the I2C device;
 * @param response_delay		Time to wait for the device response;
 *
 */
INA219::INA219(
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b084      	sub	sp, #16
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	603b      	str	r3, [r7, #0]
float max_expected_current,
float shunt_resistor,
uint8_t device_address,
uint32_t response_delay
) :
		I2C_Device(device_handle, device_address, response_delay)
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	7e3a      	ldrb	r2, [r7, #24]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	f000 f8da 	bl	80014b4 <_ZN10I2C_DeviceC1EP17I2C_HandleTypeDefhm>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001306:	839a      	strh	r2, [r3, #28]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130e:	83da      	strh	r2, [r3, #30]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001316:	841a      	strh	r2, [r3, #32]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800131e:	845a      	strh	r2, [r3, #34]	; 0x22
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2278      	movs	r2, #120	; 0x78
 8001324:	849a      	strh	r2, [r3, #36]	; 0x24
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2207      	movs	r2, #7
 800132a:	84da      	strh	r2, [r3, #38]	; 0x26
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2203      	movs	r2, #3
 8001330:	851a      	strh	r2, [r3, #40]	; 0x28
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2202      	movs	r2, #2
 8001336:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2201      	movs	r2, #1
 800133c:	859a      	strh	r2, [r3, #44]	; 0x2c
	{
		// Calibrate sensor with given current and resistor values
		INA219::calibrateSensor(max_expected_current, shunt_resistor);
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 f868 	bl	8001418 <_ZN6INA21915calibrateSensorEff>
	}
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	0000      	movs	r0, r0
 8001354:	0000      	movs	r0, r0
	...

08001358 <_ZN6INA21915getBusVoltage_VEv>:

/*
 * @brief Returns the sensed bus voltage after proper conversion.
 *
 */
float INA219::getBusVoltage_V(void){
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	// Read the register
	uint16_t register_content;
	INA219::LLR_16Bits(INA219::BUS_VOLTAGE, &register_content);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f107 020c 	add.w	r2, r7, #12
 8001366:	2102      	movs	r1, #2
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f8bc 	bl	80014e6 <_ZN10I2C_Device10LLR_16BitsEhPt>

	// Checks flags: return -100 if overflow
	uint16_t register_flags = INA219::mask_16Bits(register_content, INA219::BUS_REGISTER_FLAGS_MASK);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	89b9      	ldrh	r1, [r7, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8001376:	2300      	movs	r3, #0
 8001378:	f000 f907 	bl	800158a <_ZN10I2C_Device11mask_16BitsEttb>
 800137c:	4603      	mov	r3, r0
 800137e:	81fb      	strh	r3, [r7, #14]
	if(register_flags & INA219::BUS_REGISTER_OVF_MASK) return -100;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	4013      	ands	r3, r2
 8001388:	b29b      	uxth	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <_ZN6INA21915getBusVoltage_VEv+0x3a>
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <_ZN6INA21915getBusVoltage_VEv+0x70>)
 8001390:	e011      	b.n	80013b6 <_ZN6INA21915getBusVoltage_VEv+0x5e>

	// Remove flag bits, multiply by fixed 4 mV LSB and return result (see data-sheet page 23)
	return (register_content >> 3) * 4e-3;
 8001392:	89bb      	ldrh	r3, [r7, #12]
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	b29b      	uxth	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f82b 	bl	80003f4 <__aeabi_i2d>
 800139e:	a308      	add	r3, pc, #32	; (adr r3, 80013c0 <_ZN6INA21915getBusVoltage_VEv+0x68>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7ff f890 	bl	80004c8 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fae4 	bl	800097c <__aeabi_d2f>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013c4:	3f70624d 	.word	0x3f70624d
 80013c8:	c2c80000 	.word	0xc2c80000

080013cc <_ZN6INA21912getCurrent_AEv>:

/*
 * @brief Return the sensed current after proper conversion.
 *
 */
float INA219::getCurrent_A(void){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	// Re-calibration to avoid problems (based on Adafruit library)
	INA219::calibrateSensor(INA219::_max_expected_current, INA219::_shunt_resistor);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68d9      	ldr	r1, [r3, #12]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	461a      	mov	r2, r3
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f81a 	bl	8001418 <_ZN6INA21915calibrateSensorEff>

	// Read the register
	uint16_t register_content;
	INA219::LLR_16Bits(INA219::CURRENT, &register_content);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f107 020e 	add.w	r2, r7, #14
 80013ea:	2104      	movs	r1, #4
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f87a 	bl	80014e6 <_ZN10I2C_Device10LLR_16BitsEhPt>

	// Multiply by the current LSB and return the result
	return (int16_t)register_content * INA219::_current_lsb;
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fbca 	bl	8000b90 <__aeabi_i2f>
 80013fc:	4602      	mov	r2, r0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4619      	mov	r1, r3
 8001404:	4610      	mov	r0, r2
 8001406:	f7ff fc17 	bl	8000c38 <__aeabi_fmul>
 800140a:	4603      	mov	r3, r0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	0000      	movs	r0, r0
	...

08001418 <_ZN6INA21915calibrateSensorEff>:
 *
 * @param max_expected_current	Value of the highest current expected through shunt resistor;
 * @param shunt_resistor		Value of shunt resistor employed;
 *
 */
void INA219::calibrateSensor(float max_expected_current, float shunt_resistor){
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
	// Updates variables
	INA219::_max_expected_current = max_expected_current;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	60da      	str	r2, [r3, #12]
	INA219::_shunt_resistor = shunt_resistor;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	611a      	str	r2, [r3, #16]

	// Compute LSBs (see data-sheet page 12, equations 2 and 3)
	INA219::_current_lsb = INA219::_max_expected_current / 32768;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fcb1 	bl	8000da0 <__aeabi_fdiv>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	615a      	str	r2, [r3, #20]
	INA219::_power_lsb = 20 * INA219::_current_lsb;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4919      	ldr	r1, [pc, #100]	; (80014b0 <_ZN6INA21915calibrateSensorEff+0x98>)
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fbf3 	bl	8000c38 <__aeabi_fmul>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	619a      	str	r2, [r3, #24]

	// Compute calibration value (see data-sheet page 12, equation 1)
	uint16_t calibration_value = (uint16_t)(0.04096 / (INA219::_current_lsb * INA219::_shunt_resistor));
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	4619      	mov	r1, r3
 8001464:	4610      	mov	r0, r2
 8001466:	f7ff fbe7 	bl	8000c38 <__aeabi_fmul>
 800146a:	4603      	mov	r3, r0
 800146c:	4618      	mov	r0, r3
 800146e:	f7fe ffd3 	bl	8000418 <__aeabi_f2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	a10c      	add	r1, pc, #48	; (adr r1, 80014a8 <_ZN6INA21915calibrateSensorEff+0x90>)
 8001478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800147c:	f7ff f94e 	bl	800071c <__aeabi_ddiv>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fa58 	bl	800093c <__aeabi_d2uiz>
 800148c:	4603      	mov	r3, r0
 800148e:	82fb      	strh	r3, [r7, #22]

	// Write computed calibration value
	INA219::LLW_16Bits(INA219::CALIBRATION, calibration_value);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8afa      	ldrh	r2, [r7, #22]
 8001494:	2105      	movs	r1, #5
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f84f 	bl	800153a <_ZN10I2C_Device10LLW_16BitsEht>
}
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	f3af 8000 	nop.w
 80014a8:	88e368f1 	.word	0x88e368f1
 80014ac:	3fa4f8b5 	.word	0x3fa4f8b5
 80014b0:	41a00000 	.word	0x41a00000

080014b4 <_ZN10I2C_DeviceC1EP17I2C_HandleTypeDefhm>:
 * @param device_handle		I2C bus handle object;
 * @param device_address	Address of the I2C device;
 * @param response_delay	Time to wait for the device response;
 *
 */
I2C_Device::I2C_Device(I2C_HandleTypeDef *device_handle, uint8_t device_address, uint32_t response_delay) :
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71fb      	strb	r3, [r7, #7]
		_device_handle(device_handle),
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	601a      	str	r2, [r3, #0]
		_device_address(device_address << 1),
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	711a      	strb	r2, [r3, #4]
		_response_delay(response_delay)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	609a      	str	r2, [r3, #8]
	{}
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <_ZN10I2C_Device10LLR_16BitsEhPt>:

/*
 * @brief Read multiple-byte data from I2C device.
 *
 */
HAL_StatusTypeDef I2C_Device::LLR_16Bits(uint8_t register_address, uint16_t *data_buffer){
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b08a      	sub	sp, #40	; 0x28
 80014ea:	af04      	add	r7, sp, #16
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	460b      	mov	r3, r1
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	72fb      	strb	r3, [r7, #11]
	// Create buffer for data
	uint8_t buffer[2];

	// I2C read
	HAL_StatusTypeDef error = HAL_I2C_Mem_Read(
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6818      	ldr	r0, [r3, #0]
			I2C_Device::_device_handle,
			I2C_Device::_device_address,
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	791b      	ldrb	r3, [r3, #4]
	HAL_StatusTypeDef error = HAL_I2C_Mem_Read(
 80014fc:	b299      	uxth	r1, r3
 80014fe:	7afb      	ldrb	r3, [r7, #11]
 8001500:	b29a      	uxth	r2, r3
			register_address,
			I2C_MEMADD_SIZE_8BIT,
			buffer,
			2,
			I2C_Device::_response_delay
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	689b      	ldr	r3, [r3, #8]
	HAL_StatusTypeDef error = HAL_I2C_Mem_Read(
 8001506:	9302      	str	r3, [sp, #8]
 8001508:	2302      	movs	r3, #2
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2301      	movs	r3, #1
 8001514:	f001 fa2e 	bl	8002974 <HAL_I2C_Mem_Read>
 8001518:	4603      	mov	r3, r0
 800151a:	75fb      	strb	r3, [r7, #23]
			);

	// Concatenate and save data
	*data_buffer = I2C_Device::concat_8to16Bits(buffer);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 f854 	bl	80015d0 <_ZN10I2C_Device16concat_8to16BitsEPh>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	801a      	strh	r2, [r3, #0]

	// Return error if any
	return error;
 8001530:	7dfb      	ldrb	r3, [r7, #23]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_ZN10I2C_Device10LLW_16BitsEht>:

/*
 * @brief Write multiple-byte to I2C device.
 *
 */
HAL_StatusTypeDef I2C_Device::LLW_16Bits(uint8_t register_address, uint16_t data_buffer){
 800153a:	b580      	push	{r7, lr}
 800153c:	b088      	sub	sp, #32
 800153e:	af04      	add	r7, sp, #16
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	70fb      	strb	r3, [r7, #3]
 8001546:	4613      	mov	r3, r2
 8001548:	803b      	strh	r3, [r7, #0]
	// Create buffer for data
	uint8_t buffer[2];

	// Break data to smaller chunks for transfer
	I2C_Device::break_16to8Bits(data_buffer, buffer);
 800154a:	f107 020c 	add.w	r2, r7, #12
 800154e:	883b      	ldrh	r3, [r7, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f851 	bl	80015fa <_ZN10I2C_Device15break_16to8BitsEtPh>

	// I2C write
	HAL_StatusTypeDef error = HAL_I2C_Mem_Write(
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6818      	ldr	r0, [r3, #0]
			I2C_Device::_device_handle,
			I2C_Device::_device_address,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	791b      	ldrb	r3, [r3, #4]
	HAL_StatusTypeDef error = HAL_I2C_Mem_Write(
 8001560:	b299      	uxth	r1, r3
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	b29a      	uxth	r2, r3
			register_address,
			I2C_MEMADD_SIZE_8BIT,
			buffer,
			2,
			I2C_Device::_response_delay
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
	HAL_StatusTypeDef error = HAL_I2C_Mem_Write(
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	2302      	movs	r3, #2
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2301      	movs	r3, #1
 8001578:	f001 f902 	bl	8002780 <HAL_I2C_Mem_Write>
 800157c:	4603      	mov	r3, r0
 800157e:	73fb      	strb	r3, [r7, #15]
			);

	// Return error if any
	return error;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_ZN10I2C_Device11mask_16BitsEttb>:
 * @param data			Data to mask;
 * @param mask			Mask for the data;
 * @param invert_mask	Optionally, can invert the mask;
 *
 */
uint16_t I2C_Device::mask_16Bits(uint16_t data, uint16_t mask, bool invert_mask){
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	4608      	mov	r0, r1
 8001594:	4611      	mov	r1, r2
 8001596:	461a      	mov	r2, r3
 8001598:	4603      	mov	r3, r0
 800159a:	817b      	strh	r3, [r7, #10]
 800159c:	460b      	mov	r3, r1
 800159e:	813b      	strh	r3, [r7, #8]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71fb      	strb	r3, [r7, #7]
	// If requested invert mask and return masked data
	if(invert_mask) return data & ~mask;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <_ZN10I2C_Device11mask_16BitsEttb+0x34>
 80015aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015b6:	4013      	ands	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	e003      	b.n	80015c6 <_ZN10I2C_Device11mask_16BitsEttb+0x3c>

	// Return masked data as default
	return data & mask;
 80015be:	897a      	ldrh	r2, [r7, #10]
 80015c0:	893b      	ldrh	r3, [r7, #8]
 80015c2:	4013      	ands	r3, r2
 80015c4:	b29b      	uxth	r3, r3
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <_ZN10I2C_Device16concat_8to16BitsEPh>:
 * @brief Concatenate two 8 bit data to form a 16 bit data.
 *
 * @param bytes	The data to concatenate;
 *
 */
uint16_t I2C_Device::concat_8to16Bits(uint8_t *bytes){
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	// Shift first value to get the high half, then sum the second value for low half
	return ((bytes[0] & 0xFF) << 8) | bytes[1];
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	b29b      	uxth	r3, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <_ZN10I2C_Device15break_16to8BitsEtPh>:
 *
 * @param bytes		The data to break;
 * @param result	The buffer for the result storage;
 *
 */
void I2C_Device::break_16to8Bits(uint16_t bytes, uint8_t *result){
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	460b      	mov	r3, r1
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	817b      	strh	r3, [r7, #10]
	// Shifts data for high half, then mask and stores the low half
	result[0] = (uint8_t)(bytes >> 8);
 8001608:	897b      	ldrh	r3, [r7, #10]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	b2da      	uxtb	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	701a      	strb	r2, [r3, #0]
	result[1] = (uint8_t)(bytes & 0xFF);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	897a      	ldrh	r2, [r7, #10]
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162c:	f000 fc70 	bl	8001f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001630:	f000 f910 	bl	8001854 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001634:	f000 faba 	bl	8001bac <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8001638:	f000 f98c 	bl	8001954 <_ZL12MX_TIM1_Initv>
  MX_I2C1_Init();
 800163c:	f000 f956 	bl	80018ec <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 8001640:	f000 fa58 	bl	8001af4 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <main+0x2c>)
 8001646:	f002 fbfd 	bl	8003e44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800164a:	2100      	movs	r1, #0
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <main+0x30>)
 800164e:	f002 fca3 	bl	8003f98 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001652:	e7fe      	b.n	8001652 <main+0x2a>
 8001654:	200000c8 	.word	0x200000c8
 8001658:	20000080 	.word	0x20000080
 800165c:	00000000 	.word	0x00000000

08001660 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	// Increment time variable
	time++;
 8001668:	4b6b      	ldr	r3, [pc, #428]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	4a6a      	ldr	r2, [pc, #424]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001670:	6013      	str	r3, [r2, #0]
	*/

	// Manage PWM output - Triangle
	uint16_t pwm;

	if(time % 2000 == 0){
 8001672:	4b69      	ldr	r3, [pc, #420]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4b69      	ldr	r3, [pc, #420]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001678:	fba3 1302 	umull	r1, r3, r3, r2
 800167c:	09db      	lsrs	r3, r3, #7
 800167e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001682:	fb01 f303 	mul.w	r3, r1, r3
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d110      	bne.n	80016ae <HAL_TIM_PeriodElapsedCallback+0x4e>
			if(1 == direction) {
 800168c:	4b64      	ldr	r3, [pc, #400]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d104      	bne.n	800169e <HAL_TIM_PeriodElapsedCallback+0x3e>
				direction = -1;
 8001694:	4b62      	ldr	r3, [pc, #392]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001696:	f04f 32ff 	mov.w	r2, #4294967295
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e007      	b.n	80016ae <HAL_TIM_PeriodElapsedCallback+0x4e>
			}
			else if(-1 == direction){
 800169e:	4b60      	ldr	r3, [pc, #384]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a6:	d102      	bne.n	80016ae <HAL_TIM_PeriodElapsedCallback+0x4e>
				direction = 1;
 80016a8:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
			}
	}

	if(1 == direction) {
 80016ae:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d12d      	bne.n	8001712 <HAL_TIM_PeriodElapsedCallback+0xb2>
		pwm = (0.1 + (time % 2000) * 0.0004) * 2048;
 80016b6:	4b58      	ldr	r3, [pc, #352]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b58      	ldr	r3, [pc, #352]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80016bc:	fba3 1302 	umull	r1, r3, r3, r2
 80016c0:	09db      	lsrs	r3, r3, #7
 80016c2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fe81 	bl	80003d4 <__aeabi_ui2d>
 80016d2:	a34d      	add	r3, pc, #308	; (adr r3, 8001808 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe fef6 	bl	80004c8 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a34a      	add	r3, pc, #296	; (adr r3, 8001810 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fd37 	bl	800015c <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	4b4a      	ldr	r3, [pc, #296]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80016fc:	f7fe fee4 	bl	80004c8 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff f918 	bl	800093c <__aeabi_d2uiz>
 800170c:	4603      	mov	r3, r0
 800170e:	81fb      	strh	r3, [r7, #14]
 8001710:	e033      	b.n	800177a <HAL_TIM_PeriodElapsedCallback+0x11a>
	}
	else if(-1 == direction){
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171a:	d12e      	bne.n	800177a <HAL_TIM_PeriodElapsedCallback+0x11a>
		pwm = (0.1 + (2000 - time % 2000) * 0.0004) * 2048;
 800171c:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b3e      	ldr	r3, [pc, #248]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001722:	fba3 1302 	umull	r1, r3, r3, r2
 8001726:	09db      	lsrs	r3, r3, #7
 8001728:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fe4c 	bl	80003d4 <__aeabi_ui2d>
 800173c:	a332      	add	r3, pc, #200	; (adr r3, 8001808 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe fec1 	bl	80004c8 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	a330      	add	r3, pc, #192	; (adr r3, 8001810 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe fd02 	bl	800015c <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001766:	f7fe feaf 	bl	80004c8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f8e3 	bl	800093c <__aeabi_d2uiz>
 8001776:	4603      	mov	r3, r0
 8001778:	81fb      	strh	r3, [r7, #14]
	}


	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	89fa      	ldrh	r2, [r7, #14]
 8001780:	635a      	str	r2, [r3, #52]	; 0x34

	// Acquire data
	current1 = CurrentSensor1.getCurrent_A();
 8001782:	482a      	ldr	r0, [pc, #168]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001784:	f7ff fe22 	bl	80013cc <_ZN6INA21912getCurrent_AEv>
 8001788:	4603      	mov	r3, r0
 800178a:	4a29      	ldr	r2, [pc, #164]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800178c:	6013      	str	r3, [r2, #0]
	current2 = CurrentSensor2.getCurrent_A();
 800178e:	4829      	ldr	r0, [pc, #164]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001790:	f7ff fe1c 	bl	80013cc <_ZN6INA21912getCurrent_AEv>
 8001794:	4603      	mov	r3, r0
 8001796:	4a28      	ldr	r2, [pc, #160]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001798:	6013      	str	r3, [r2, #0]
	Current_A = (current1 - current2) / 2;
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a26      	ldr	r2, [pc, #152]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff f93d 	bl	8000a24 <__aeabi_fsub>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff faf5 	bl	8000da0 <__aeabi_fdiv>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80017bc:	601a      	str	r2, [r3, #0]

	voltage1 = CurrentSensor1.getBusVoltage_V();
 80017be:	481b      	ldr	r0, [pc, #108]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80017c0:	f7ff fdca 	bl	8001358 <_ZN6INA21915getBusVoltage_VEv>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80017c8:	6013      	str	r3, [r2, #0]
	voltage2 = CurrentSensor2.getBusVoltage_V();
 80017ca:	481a      	ldr	r0, [pc, #104]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80017cc:	f7ff fdc4 	bl	8001358 <_ZN6INA21915getBusVoltage_VEv>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80017d4:	6013      	str	r3, [r2, #0]
	Voltage_V = (voltage1 - voltage2);
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff f91f 	bl	8000a24 <__aeabi_fsub>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80017ec:	601a      	str	r2, [r3, #0]

	Angle_DEG = Encoder.getUnwrappedAngle(AS5600::DEG);
 80017ee:	2100      	movs	r1, #0
 80017f0:	4816      	ldr	r0, [pc, #88]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80017f2:	f7ff fd00 	bl	80011f6 <_ZN6AS560017getUnwrappedAngleENS_17OUTPUT_ANGLE_UNITE>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a15      	ldr	r2, [pc, #84]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	f3af 8000 	nop.w
 8001808:	eb1c432d 	.word	0xeb1c432d
 800180c:	3f3a36e2 	.word	0x3f3a36e2
 8001810:	9999999a 	.word	0x9999999a
 8001814:	3fb99999 	.word	0x3fb99999
 8001818:	2000012c 	.word	0x2000012c
 800181c:	10624dd3 	.word	0x10624dd3
 8001820:	20000000 	.word	0x20000000
 8001824:	40a00000 	.word	0x40a00000
 8001828:	20000080 	.word	0x20000080
 800182c:	20000178 	.word	0x20000178
 8001830:	2000011c 	.word	0x2000011c
 8001834:	200001a8 	.word	0x200001a8
 8001838:	20000120 	.word	0x20000120
 800183c:	20000110 	.word	0x20000110
 8001840:	20000124 	.word	0x20000124
 8001844:	20000128 	.word	0x20000128
 8001848:	20000114 	.word	0x20000114
 800184c:	20000130 	.word	0x20000130
 8001850:	20000118 	.word	0x20000118

08001854 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b090      	sub	sp, #64	; 0x40
 8001858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185a:	f107 0318 	add.w	r3, r7, #24
 800185e:	2228      	movs	r2, #40	; 0x28
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f003 fa9c 	bl	8004da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001876:	2302      	movs	r3, #2
 8001878:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187a:	2301      	movs	r3, #1
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800187e:	2310      	movs	r3, #16
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001882:	2302      	movs	r3, #2
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001886:	2300      	movs	r3, #0
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800188a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001890:	f107 0318 	add.w	r3, r7, #24
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fe89 	bl	80035ac <HAL_RCC_OscConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf14      	ite	ne
 80018a0:	2301      	movne	r3, #1
 80018a2:	2300      	moveq	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 80018aa:	f000 f9ad 	bl	8001c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ae:	230f      	movs	r3, #15
 80018b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b2:	2302      	movs	r3, #2
 80018b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2102      	movs	r1, #2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 f8f1 	bl	8003ab0 <HAL_RCC_ClockConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 80018de:	f000 f993 	bl	8001c08 <Error_Handler>
  }
}
 80018e2:	bf00      	nop
 80018e4:	3740      	adds	r7, #64	; 0x40
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <_ZL12MX_I2C1_Initv+0x5c>)
 80018f2:	4a16      	ldr	r2, [pc, #88]	; (800194c <_ZL12MX_I2C1_Initv+0x60>)
 80018f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <_ZL12MX_I2C1_Initv+0x5c>)
 80018f8:	4a15      	ldr	r2, [pc, #84]	; (8001950 <_ZL12MX_I2C1_Initv+0x64>)
 80018fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <_ZL12MX_I2C1_Initv+0x5c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <_ZL12MX_I2C1_Initv+0x5c>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <_ZL12MX_I2C1_Initv+0x5c>)
 800190a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800190e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001910:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <_ZL12MX_I2C1_Initv+0x5c>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <_ZL12MX_I2C1_Initv+0x5c>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <_ZL12MX_I2C1_Initv+0x5c>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <_ZL12MX_I2C1_Initv+0x5c>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <_ZL12MX_I2C1_Initv+0x5c>)
 800192a:	f000 fde5 	bl	80024f8 <HAL_I2C_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf14      	ite	ne
 8001934:	2301      	movne	r3, #1
 8001936:	2300      	moveq	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800193e:	f000 f963 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000002c 	.word	0x2000002c
 800194c:	40005400 	.word	0x40005400
 8001950:	00061a80 	.word	0x00061a80

08001954 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b096      	sub	sp, #88	; 0x58
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001968:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	615a      	str	r2, [r3, #20]
 8001984:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2220      	movs	r2, #32
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fa07 	bl	8004da0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001992:	4b56      	ldr	r3, [pc, #344]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 8001994:	4a56      	ldr	r2, [pc, #344]	; (8001af0 <_ZL12MX_TIM1_Initv+0x19c>)
 8001996:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31 - 1;
 8001998:	4b54      	ldr	r3, [pc, #336]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 800199a:	221e      	movs	r2, #30
 800199c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	4b53      	ldr	r3, [pc, #332]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2048 - 1;
 80019a4:	4b51      	ldr	r3, [pc, #324]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 80019a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80019aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ac:	4b4f      	ldr	r3, [pc, #316]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019b2:	4b4e      	ldr	r3, [pc, #312]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019b8:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 80019ba:	2280      	movs	r2, #128	; 0x80
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019be:	484b      	ldr	r0, [pc, #300]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 80019c0:	f002 f9f0 	bl	8003da4 <HAL_TIM_Base_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bf14      	ite	ne
 80019ca:	2301      	movne	r3, #1
 80019cc:	2300      	moveq	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 80019d4:	f000 f918 	bl	8001c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019e2:	4619      	mov	r1, r3
 80019e4:	4841      	ldr	r0, [pc, #260]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 80019e6:	f002 fd43 	bl	8004470 <HAL_TIM_ConfigClockSource>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf14      	ite	ne
 80019f0:	2301      	movne	r3, #1
 80019f2:	2300      	moveq	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 80019fa:	f000 f905 	bl	8001c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019fe:	483b      	ldr	r0, [pc, #236]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 8001a00:	f002 fa72 	bl	8003ee8 <HAL_TIM_PWM_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bf14      	ite	ne
 8001a0a:	2301      	movne	r3, #1
 8001a0c:	2300      	moveq	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8001a14:	f000 f8f8 	bl	8001c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a24:	4619      	mov	r1, r3
 8001a26:	4831      	ldr	r0, [pc, #196]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 8001a28:	f003 f8b2 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf14      	ite	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	2300      	moveq	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8001a3c:	f000 f8e4 	bl	8001c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a40:	2360      	movs	r3, #96	; 0x60
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a60:	2200      	movs	r2, #0
 8001a62:	4619      	mov	r1, r3
 8001a64:	4821      	ldr	r0, [pc, #132]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 8001a66:	f002 fc41 	bl	80042ec <HAL_TIM_PWM_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8001a7a:	f000 f8c5 	bl	8001c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a82:	2208      	movs	r2, #8
 8001a84:	4619      	mov	r1, r3
 8001a86:	4819      	ldr	r0, [pc, #100]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 8001a88:	f002 fc30 	bl	80042ec <HAL_TIM_PWM_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf14      	ite	ne
 8001a92:	2301      	movne	r3, #1
 8001a94:	2300      	moveq	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8001a9c:	f000 f8b4 	bl	8001c08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480a      	ldr	r0, [pc, #40]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 8001ac4:	f003 f8c2 	bl	8004c4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bf14      	ite	ne
 8001ace:	2301      	movne	r3, #1
 8001ad0:	2300      	moveq	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <_ZL12MX_TIM1_Initv+0x188>
  {
    Error_Handler();
 8001ad8:	f000 f896 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <_ZL12MX_TIM1_Initv+0x198>)
 8001ade:	f000 f985 	bl	8001dec <HAL_TIM_MspPostInit>

}
 8001ae2:	bf00      	nop
 8001ae4:	3758      	adds	r7, #88	; 0x58
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000080 	.word	0x20000080
 8001af0:	40012c00 	.word	0x40012c00

08001af4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	463b      	mov	r3, r7
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b10:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001b12:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001b14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64 - 1;
 8001b16:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001b18:	223f      	movs	r2, #63	; 0x3f
 8001b1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1c:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8001b22:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001b24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b36:	481b      	ldr	r0, [pc, #108]	; (8001ba4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001b38:	f002 f934 	bl	8003da4 <HAL_TIM_Base_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bf14      	ite	ne
 8001b42:	2301      	movne	r3, #1
 8001b44:	2300      	moveq	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8001b4c:	f000 f85c 	bl	8001c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b56:	f107 0308 	add.w	r3, r7, #8
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4811      	ldr	r0, [pc, #68]	; (8001ba4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001b5e:	f002 fc87 	bl	8004470 <HAL_TIM_ConfigClockSource>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf14      	ite	ne
 8001b68:	2301      	movne	r3, #1
 8001b6a:	2300      	moveq	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8001b72:	f000 f849 	bl	8001c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b7e:	463b      	mov	r3, r7
 8001b80:	4619      	mov	r1, r3
 8001b82:	4808      	ldr	r0, [pc, #32]	; (8001ba4 <_ZL12MX_TIM3_Initv+0xb0>)
 8001b84:	f003 f804 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf14      	ite	ne
 8001b8e:	2301      	movne	r3, #1
 8001b90:	2300      	moveq	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8001b98:	f000 f836 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200000c8 	.word	0x200000c8
 8001ba8:	40000400 	.word	0x40000400

08001bac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <_ZL12MX_GPIO_Initv+0x58>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <_ZL12MX_GPIO_Initv+0x58>)
 8001bb8:	f043 0320 	orr.w	r3, r3, #32
 8001bbc:	6193      	str	r3, [r2, #24]
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <_ZL12MX_GPIO_Initv+0x58>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <_ZL12MX_GPIO_Initv+0x58>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <_ZL12MX_GPIO_Initv+0x58>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	6193      	str	r3, [r2, #24]
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <_ZL12MX_GPIO_Initv+0x58>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <_ZL12MX_GPIO_Initv+0x58>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <_ZL12MX_GPIO_Initv+0x58>)
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	6193      	str	r3, [r2, #24]
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <_ZL12MX_GPIO_Initv+0x58>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40021000 	.word	0x40021000

08001c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0c:	b672      	cpsid	i
}
 8001c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <Error_Handler+0x8>
	...

08001c14 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d120      	bne.n	8001c66 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d11b      	bne.n	8001c66 <_Z41__static_initialization_and_destruction_0ii+0x52>
AS5600 Encoder(&hi2c1, 0x36, AS5600::CLOCK_WISE, 0x01);
 8001c2e:	2301      	movs	r3, #1
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2300      	movs	r3, #0
 8001c34:	2236      	movs	r2, #54	; 0x36
 8001c36:	490e      	ldr	r1, [pc, #56]	; (8001c70 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001c38:	480e      	ldr	r0, [pc, #56]	; (8001c74 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001c3a:	f7ff f9e9 	bl	8001010 <_ZN6AS5600C1EP17I2C_HandleTypeDefhNS_18ROTATION_DIRECTIONEm>
INA219 CurrentSensor1(&hi2c1, max_expected_current, shunt_resistor, 0x40, 0x01);
 8001c3e:	2301      	movs	r3, #1
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	2340      	movs	r3, #64	; 0x40
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001c48:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001c4a:	4909      	ldr	r1, [pc, #36]	; (8001c70 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001c4c:	480c      	ldr	r0, [pc, #48]	; (8001c80 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001c4e:	f7ff fb4a 	bl	80012e6 <_ZN6INA219C1EP17I2C_HandleTypeDefffhm>
INA219 CurrentSensor2(&hi2c1, max_expected_current, shunt_resistor, 0x44, 0x01);
 8001c52:	2301      	movs	r3, #1
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	2344      	movs	r3, #68	; 0x44
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001c5e:	4904      	ldr	r1, [pc, #16]	; (8001c70 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001c60:	4808      	ldr	r0, [pc, #32]	; (8001c84 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001c62:	f7ff fb40 	bl	80012e6 <_ZN6INA219C1EP17I2C_HandleTypeDefffhm>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000002c 	.word	0x2000002c
 8001c74:	20000130 	.word	0x20000130
 8001c78:	3dcccccd 	.word	0x3dcccccd
 8001c7c:	40400000 	.word	0x40400000
 8001c80:	20000178 	.word	0x20000178
 8001c84:	200001a8 	.word	0x200001a8

08001c88 <_GLOBAL__sub_I_hi2c1>:
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c90:	2001      	movs	r0, #1
 8001c92:	f7ff ffbf 	bl	8001c14 <_Z41__static_initialization_and_destruction_0ii>
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6193      	str	r3, [r2, #24]
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_MspInit+0x60>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HAL_MspInit+0x60>)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010000 	.word	0x40010000

08001cfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a15      	ldr	r2, [pc, #84]	; (8001d6c <HAL_I2C_MspInit+0x70>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d123      	bne.n	8001d64 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_I2C_MspInit+0x74>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <HAL_I2C_MspInit+0x74>)
 8001d22:	f043 0308 	orr.w	r3, r3, #8
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_I2C_MspInit+0x74>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d34:	23c0      	movs	r3, #192	; 0xc0
 8001d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d38:	2312      	movs	r3, #18
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	4619      	mov	r1, r3
 8001d46:	480b      	ldr	r0, [pc, #44]	; (8001d74 <HAL_I2C_MspInit+0x78>)
 8001d48:	f000 fa52 	bl	80021f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_I2C_MspInit+0x74>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_I2C_MspInit+0x74>)
 8001d52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d56:	61d3      	str	r3, [r2, #28]
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_I2C_MspInit+0x74>)
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d64:	bf00      	nop
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40005400 	.word	0x40005400
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40010c00 	.word	0x40010c00

08001d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a16      	ldr	r2, [pc, #88]	; (8001de0 <HAL_TIM_Base_MspInit+0x68>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10c      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d94:	6193      	str	r3, [r2, #24]
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001da2:	e018      	b.n	8001dd6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <HAL_TIM_Base_MspInit+0x70>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d113      	bne.n	8001dd6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_TIM_Base_MspInit+0x6c>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4a0c      	ldr	r2, [pc, #48]	; (8001de4 <HAL_TIM_Base_MspInit+0x6c>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	61d3      	str	r3, [r2, #28]
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_TIM_Base_MspInit+0x6c>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	201d      	movs	r0, #29
 8001dcc:	f000 f9d9 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dd0:	201d      	movs	r0, #29
 8001dd2:	f000 f9f2 	bl	80021ba <HAL_NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40012c00 	.word	0x40012c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40000400 	.word	0x40000400

08001dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <HAL_TIM_MspPostInit+0x5c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d118      	bne.n	8001e3e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_TIM_MspPostInit+0x60>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <HAL_TIM_MspPostInit+0x60>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6193      	str	r3, [r2, #24]
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_TIM_MspPostInit+0x60>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0310 	add.w	r3, r7, #16
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	; (8001e50 <HAL_TIM_MspPostInit+0x64>)
 8001e3a:	f000 f9d9 	bl	80021f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e3e:	bf00      	nop
 8001e40:	3720      	adds	r7, #32
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40012c00 	.word	0x40012c00
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010800 	.word	0x40010800

08001e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <NMI_Handler+0x4>

08001e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <MemManage_Handler+0x4>

08001e66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <BusFault_Handler+0x4>

08001e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <UsageFault_Handler+0x4>

08001e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e9a:	f000 f87f 	bl	8001f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <TIM3_IRQHandler+0x10>)
 8001eaa:	f002 f917 	bl	80040dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200000c8 	.word	0x200000c8

08001eb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec4:	f7ff fff8 	bl	8001eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eca:	490c      	ldr	r1, [pc, #48]	; (8001efc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ee0:	4c09      	ldr	r4, [pc, #36]	; (8001f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eee:	f002 ff5f 	bl	8004db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ef2:	f7ff fb99 	bl	8001628 <main>
  bx lr
 8001ef6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001efc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f00:	08004e48 	.word	0x08004e48
  ldr r2, =_sbss
 8001f04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f08:	200001dc 	.word	0x200001dc

08001f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC1_2_IRQHandler>
	...

08001f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_Init+0x28>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_Init+0x28>)
 8001f1a:	f043 0310 	orr.w	r3, r3, #16
 8001f1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 f923 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f26:	200f      	movs	r0, #15
 8001f28:	f000 f808 	bl	8001f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f2c:	f7ff feb4 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40022000 	.word	0x40022000

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_InitTick+0x54>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_InitTick+0x58>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 f93b 	bl	80021d6 <HAL_SYSTICK_Config>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00e      	b.n	8001f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	d80a      	bhi.n	8001f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f70:	2200      	movs	r2, #0
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f000 f903 	bl	8002182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f7c:	4a06      	ldr	r2, [pc, #24]	; (8001f98 <HAL_InitTick+0x5c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000004 	.word	0x20000004
 8001f94:	2000000c 	.word	0x2000000c
 8001f98:	20000008 	.word	0x20000008

08001f9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_IncTick+0x1c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_IncTick+0x20>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a03      	ldr	r2, [pc, #12]	; (8001fbc <HAL_IncTick+0x20>)
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	2000000c 	.word	0x2000000c
 8001fbc:	200001d8 	.word	0x200001d8

08001fc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <HAL_GetTick+0x10>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	200001d8 	.word	0x200001d8

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db0b      	blt.n	8002062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	4906      	ldr	r1, [pc, #24]	; (800206c <__NVIC_EnableIRQ+0x34>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2001      	movs	r0, #1
 800205a:	fa00 f202 	lsl.w	r2, r0, r2
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100

08002070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	; (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	; (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	4313      	orrs	r3, r2
         );
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff90 	bl	8002070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff2d 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff42 	bl	800201c <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff90 	bl	80020c4 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5f 	bl	8002070 <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff35 	bl	8002038 <__NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffa2 	bl	8002128 <SysTick_Config>
 80021e4:	4603      	mov	r3, r0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b08b      	sub	sp, #44	; 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002202:	e169      	b.n	80024d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002204:	2201      	movs	r2, #1
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	429a      	cmp	r2, r3
 800221e:	f040 8158 	bne.w	80024d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a9a      	ldr	r2, [pc, #616]	; (8002490 <HAL_GPIO_Init+0x2a0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d05e      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 800222c:	4a98      	ldr	r2, [pc, #608]	; (8002490 <HAL_GPIO_Init+0x2a0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d875      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002232:	4a98      	ldr	r2, [pc, #608]	; (8002494 <HAL_GPIO_Init+0x2a4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d058      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002238:	4a96      	ldr	r2, [pc, #600]	; (8002494 <HAL_GPIO_Init+0x2a4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d86f      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800223e:	4a96      	ldr	r2, [pc, #600]	; (8002498 <HAL_GPIO_Init+0x2a8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d052      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002244:	4a94      	ldr	r2, [pc, #592]	; (8002498 <HAL_GPIO_Init+0x2a8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d869      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800224a:	4a94      	ldr	r2, [pc, #592]	; (800249c <HAL_GPIO_Init+0x2ac>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d04c      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 8002250:	4a92      	ldr	r2, [pc, #584]	; (800249c <HAL_GPIO_Init+0x2ac>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d863      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002256:	4a92      	ldr	r2, [pc, #584]	; (80024a0 <HAL_GPIO_Init+0x2b0>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d046      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
 800225c:	4a90      	ldr	r2, [pc, #576]	; (80024a0 <HAL_GPIO_Init+0x2b0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d85d      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 8002262:	2b12      	cmp	r3, #18
 8002264:	d82a      	bhi.n	80022bc <HAL_GPIO_Init+0xcc>
 8002266:	2b12      	cmp	r3, #18
 8002268:	d859      	bhi.n	800231e <HAL_GPIO_Init+0x12e>
 800226a:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <HAL_GPIO_Init+0x80>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	080022eb 	.word	0x080022eb
 8002274:	080022c5 	.word	0x080022c5
 8002278:	080022d7 	.word	0x080022d7
 800227c:	08002319 	.word	0x08002319
 8002280:	0800231f 	.word	0x0800231f
 8002284:	0800231f 	.word	0x0800231f
 8002288:	0800231f 	.word	0x0800231f
 800228c:	0800231f 	.word	0x0800231f
 8002290:	0800231f 	.word	0x0800231f
 8002294:	0800231f 	.word	0x0800231f
 8002298:	0800231f 	.word	0x0800231f
 800229c:	0800231f 	.word	0x0800231f
 80022a0:	0800231f 	.word	0x0800231f
 80022a4:	0800231f 	.word	0x0800231f
 80022a8:	0800231f 	.word	0x0800231f
 80022ac:	0800231f 	.word	0x0800231f
 80022b0:	0800231f 	.word	0x0800231f
 80022b4:	080022cd 	.word	0x080022cd
 80022b8:	080022e1 	.word	0x080022e1
 80022bc:	4a79      	ldr	r2, [pc, #484]	; (80024a4 <HAL_GPIO_Init+0x2b4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022c2:	e02c      	b.n	800231e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	623b      	str	r3, [r7, #32]
          break;
 80022ca:	e029      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	3304      	adds	r3, #4
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	e024      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	3308      	adds	r3, #8
 80022dc:	623b      	str	r3, [r7, #32]
          break;
 80022de:	e01f      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	330c      	adds	r3, #12
 80022e6:	623b      	str	r3, [r7, #32]
          break;
 80022e8:	e01a      	b.n	8002320 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022f2:	2304      	movs	r3, #4
 80022f4:	623b      	str	r3, [r7, #32]
          break;
 80022f6:	e013      	b.n	8002320 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002300:	2308      	movs	r3, #8
 8002302:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	611a      	str	r2, [r3, #16]
          break;
 800230a:	e009      	b.n	8002320 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800230c:	2308      	movs	r3, #8
 800230e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	615a      	str	r2, [r3, #20]
          break;
 8002316:	e003      	b.n	8002320 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
          break;
 800231c:	e000      	b.n	8002320 <HAL_GPIO_Init+0x130>
          break;
 800231e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2bff      	cmp	r3, #255	; 0xff
 8002324:	d801      	bhi.n	800232a <HAL_GPIO_Init+0x13a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	e001      	b.n	800232e <HAL_GPIO_Init+0x13e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2bff      	cmp	r3, #255	; 0xff
 8002334:	d802      	bhi.n	800233c <HAL_GPIO_Init+0x14c>
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	e002      	b.n	8002342 <HAL_GPIO_Init+0x152>
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	3b08      	subs	r3, #8
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	210f      	movs	r1, #15
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	401a      	ands	r2, r3
 8002354:	6a39      	ldr	r1, [r7, #32]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	431a      	orrs	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80b1 	beq.w	80024d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002370:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <HAL_GPIO_Init+0x2b8>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a4c      	ldr	r2, [pc, #304]	; (80024a8 <HAL_GPIO_Init+0x2b8>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <HAL_GPIO_Init+0x2b8>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002388:	4a48      	ldr	r2, [pc, #288]	; (80024ac <HAL_GPIO_Init+0x2bc>)
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	220f      	movs	r2, #15
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a40      	ldr	r2, [pc, #256]	; (80024b0 <HAL_GPIO_Init+0x2c0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d013      	beq.n	80023dc <HAL_GPIO_Init+0x1ec>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3f      	ldr	r2, [pc, #252]	; (80024b4 <HAL_GPIO_Init+0x2c4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00d      	beq.n	80023d8 <HAL_GPIO_Init+0x1e8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3e      	ldr	r2, [pc, #248]	; (80024b8 <HAL_GPIO_Init+0x2c8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d007      	beq.n	80023d4 <HAL_GPIO_Init+0x1e4>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3d      	ldr	r2, [pc, #244]	; (80024bc <HAL_GPIO_Init+0x2cc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d101      	bne.n	80023d0 <HAL_GPIO_Init+0x1e0>
 80023cc:	2303      	movs	r3, #3
 80023ce:	e006      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023d0:	2304      	movs	r3, #4
 80023d2:	e004      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e002      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_GPIO_Init+0x1ee>
 80023dc:	2300      	movs	r3, #0
 80023de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e0:	f002 0203 	and.w	r2, r2, #3
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	4093      	lsls	r3, r2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023ee:	492f      	ldr	r1, [pc, #188]	; (80024ac <HAL_GPIO_Init+0x2bc>)
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002408:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	492c      	ldr	r1, [pc, #176]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	608b      	str	r3, [r1, #8]
 8002414:	e006      	b.n	8002424 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	43db      	mvns	r3, r3
 800241e:	4928      	ldr	r1, [pc, #160]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002420:	4013      	ands	r3, r2
 8002422:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002430:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	4922      	ldr	r1, [pc, #136]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	60cb      	str	r3, [r1, #12]
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	43db      	mvns	r3, r3
 8002446:	491e      	ldr	r1, [pc, #120]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002448:	4013      	ands	r3, r2
 800244a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	4918      	ldr	r1, [pc, #96]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	43db      	mvns	r3, r3
 800246e:	4914      	ldr	r1, [pc, #80]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002470:	4013      	ands	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d021      	beq.n	80024c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_GPIO_Init+0x2d0>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]
 800248c:	e021      	b.n	80024d2 <HAL_GPIO_Init+0x2e2>
 800248e:	bf00      	nop
 8002490:	10320000 	.word	0x10320000
 8002494:	10310000 	.word	0x10310000
 8002498:	10220000 	.word	0x10220000
 800249c:	10210000 	.word	0x10210000
 80024a0:	10120000 	.word	0x10120000
 80024a4:	10110000 	.word	0x10110000
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40010800 	.word	0x40010800
 80024b4:	40010c00 	.word	0x40010c00
 80024b8:	40011000 	.word	0x40011000
 80024bc:	40011400 	.word	0x40011400
 80024c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_GPIO_Init+0x304>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	4909      	ldr	r1, [pc, #36]	; (80024f4 <HAL_GPIO_Init+0x304>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	3301      	adds	r3, #1
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f47f ae8e 	bne.w	8002204 <HAL_GPIO_Init+0x14>
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	372c      	adds	r7, #44	; 0x2c
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40010400 	.word	0x40010400

080024f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e12b      	b.n	8002762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fbec 	bl	8001cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800254a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800255c:	f001 fbf0 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 8002560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a81      	ldr	r2, [pc, #516]	; (800276c <HAL_I2C_Init+0x274>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d807      	bhi.n	800257c <HAL_I2C_Init+0x84>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a80      	ldr	r2, [pc, #512]	; (8002770 <HAL_I2C_Init+0x278>)
 8002570:	4293      	cmp	r3, r2
 8002572:	bf94      	ite	ls
 8002574:	2301      	movls	r3, #1
 8002576:	2300      	movhi	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e006      	b.n	800258a <HAL_I2C_Init+0x92>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a7d      	ldr	r2, [pc, #500]	; (8002774 <HAL_I2C_Init+0x27c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	bf94      	ite	ls
 8002584:	2301      	movls	r3, #1
 8002586:	2300      	movhi	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0e7      	b.n	8002762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4a78      	ldr	r2, [pc, #480]	; (8002778 <HAL_I2C_Init+0x280>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0c9b      	lsrs	r3, r3, #18
 800259c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a6a      	ldr	r2, [pc, #424]	; (800276c <HAL_I2C_Init+0x274>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d802      	bhi.n	80025cc <HAL_I2C_Init+0xd4>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	e009      	b.n	80025e0 <HAL_I2C_Init+0xe8>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	4a69      	ldr	r2, [pc, #420]	; (800277c <HAL_I2C_Init+0x284>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	3301      	adds	r3, #1
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	495c      	ldr	r1, [pc, #368]	; (800276c <HAL_I2C_Init+0x274>)
 80025fc:	428b      	cmp	r3, r1
 80025fe:	d819      	bhi.n	8002634 <HAL_I2C_Init+0x13c>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e59      	subs	r1, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fbb1 f3f3 	udiv	r3, r1, r3
 800260e:	1c59      	adds	r1, r3, #1
 8002610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002614:	400b      	ands	r3, r1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_I2C_Init+0x138>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1e59      	subs	r1, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fbb1 f3f3 	udiv	r3, r1, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262e:	e051      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002630:	2304      	movs	r3, #4
 8002632:	e04f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d111      	bne.n	8002660 <HAL_I2C_Init+0x168>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	440b      	add	r3, r1
 800264a:	fbb0 f3f3 	udiv	r3, r0, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e012      	b.n	8002686 <HAL_I2C_Init+0x18e>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	0099      	lsls	r1, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Init+0x196>
 800268a:	2301      	movs	r3, #1
 800268c:	e022      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10e      	bne.n	80026b4 <HAL_I2C_Init+0x1bc>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e58      	subs	r0, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	440b      	add	r3, r1
 80026a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b2:	e00f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	0099      	lsls	r1, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	6809      	ldr	r1, [r1, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6911      	ldr	r1, [r2, #16]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68d2      	ldr	r2, [r2, #12]
 800270e:	4311      	orrs	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	430b      	orrs	r3, r1
 8002716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	000186a0 	.word	0x000186a0
 8002770:	001e847f 	.word	0x001e847f
 8002774:	003d08ff 	.word	0x003d08ff
 8002778:	431bde83 	.word	0x431bde83
 800277c:	10624dd3 	.word	0x10624dd3

08002780 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	4608      	mov	r0, r1
 800278a:	4611      	mov	r1, r2
 800278c:	461a      	mov	r2, r3
 800278e:	4603      	mov	r3, r0
 8002790:	817b      	strh	r3, [r7, #10]
 8002792:	460b      	mov	r3, r1
 8002794:	813b      	strh	r3, [r7, #8]
 8002796:	4613      	mov	r3, r2
 8002798:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800279a:	f7ff fc11 	bl	8001fc0 <HAL_GetTick>
 800279e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	f040 80d9 	bne.w	8002960 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2319      	movs	r3, #25
 80027b4:	2201      	movs	r2, #1
 80027b6:	496d      	ldr	r1, [pc, #436]	; (800296c <HAL_I2C_Mem_Write+0x1ec>)
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fcc1 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
 80027c6:	e0cc      	b.n	8002962 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_I2C_Mem_Write+0x56>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e0c5      	b.n	8002962 <HAL_I2C_Mem_Write+0x1e2>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d007      	beq.n	80027fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2221      	movs	r2, #33	; 0x21
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2240      	movs	r2, #64	; 0x40
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800282c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a4d      	ldr	r2, [pc, #308]	; (8002970 <HAL_I2C_Mem_Write+0x1f0>)
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800283e:	88f8      	ldrh	r0, [r7, #6]
 8002840:	893a      	ldrh	r2, [r7, #8]
 8002842:	8979      	ldrh	r1, [r7, #10]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	4603      	mov	r3, r0
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 faf8 	bl	8002e44 <I2C_RequestMemoryWrite>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d052      	beq.n	8002900 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e081      	b.n	8002962 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fd86 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00d      	beq.n	800288a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	2b04      	cmp	r3, #4
 8002874:	d107      	bne.n	8002886 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002884:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06b      	b.n	8002962 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d11b      	bne.n	8002900 <HAL_I2C_Mem_Write+0x180>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d017      	beq.n	8002900 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	781a      	ldrb	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1aa      	bne.n	800285e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fd79 	bl	8003404 <I2C_WaitOnBTFFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00d      	beq.n	8002934 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2b04      	cmp	r3, #4
 800291e:	d107      	bne.n	8002930 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e016      	b.n	8002962 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	e000      	b.n	8002962 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002960:	2302      	movs	r3, #2
  }
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	00100002 	.word	0x00100002
 8002970:	ffff0000 	.word	0xffff0000

08002974 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08c      	sub	sp, #48	; 0x30
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	4608      	mov	r0, r1
 800297e:	4611      	mov	r1, r2
 8002980:	461a      	mov	r2, r3
 8002982:	4603      	mov	r3, r0
 8002984:	817b      	strh	r3, [r7, #10]
 8002986:	460b      	mov	r3, r1
 8002988:	813b      	strh	r3, [r7, #8]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002992:	f7ff fb15 	bl	8001fc0 <HAL_GetTick>
 8002996:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	f040 8244 	bne.w	8002e2e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2319      	movs	r3, #25
 80029ac:	2201      	movs	r2, #1
 80029ae:	4982      	ldr	r1, [pc, #520]	; (8002bb8 <HAL_I2C_Mem_Read+0x244>)
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fbc5 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
 80029be:	e237      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_I2C_Mem_Read+0x5a>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e230      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4bc>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d007      	beq.n	80029f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2222      	movs	r2, #34	; 0x22
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2240      	movs	r2, #64	; 0x40
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a62      	ldr	r2, [pc, #392]	; (8002bbc <HAL_I2C_Mem_Read+0x248>)
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a36:	88f8      	ldrh	r0, [r7, #6]
 8002a38:	893a      	ldrh	r2, [r7, #8]
 8002a3a:	8979      	ldrh	r1, [r7, #10]
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	4603      	mov	r3, r0
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fa92 	bl	8002f70 <I2C_RequestMemoryRead>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e1ec      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d113      	bne.n	8002a86 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	e1c0      	b.n	8002e08 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d11e      	bne.n	8002acc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a9e:	b672      	cpsid	i
}
 8002aa0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ac8:	b662      	cpsie	i
}
 8002aca:	e035      	b.n	8002b38 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d11e      	bne.n	8002b12 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ae2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae4:	b672      	cpsid	i
}
 8002ae6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b0e:	b662      	cpsie	i
}
 8002b10:	e012      	b.n	8002b38 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b20:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b38:	e166      	b.n	8002e08 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	f200 811f 	bhi.w	8002d82 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d123      	bne.n	8002b94 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fc9f 	bl	8003494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e167      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b92:	e139      	b.n	8002e08 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d152      	bne.n	8002c42 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	4906      	ldr	r1, [pc, #24]	; (8002bc0 <HAL_I2C_Mem_Read+0x24c>)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 faca 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e13c      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4bc>
 8002bb6:	bf00      	nop
 8002bb8:	00100002 	.word	0x00100002
 8002bbc:	ffff0000 	.word	0xffff0000
 8002bc0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc4:	b672      	cpsid	i
}
 8002bc6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c0a:	b662      	cpsie	i
}
 8002c0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c40:	e0e2      	b.n	8002e08 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	2200      	movs	r2, #0
 8002c4a:	497b      	ldr	r1, [pc, #492]	; (8002e38 <HAL_I2C_Mem_Read+0x4c4>)
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fa77 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0e9      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c6c:	b672      	cpsid	i
}
 8002c6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ca2:	4b66      	ldr	r3, [pc, #408]	; (8002e3c <HAL_I2C_Mem_Read+0x4c8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	08db      	lsrs	r3, r3, #3
 8002ca8:	4a65      	ldr	r2, [pc, #404]	; (8002e40 <HAL_I2C_Mem_Read+0x4cc>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	0a1a      	lsrs	r2, r3, #8
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00da      	lsls	r2, r3, #3
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d118      	bne.n	8002cfa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f043 0220 	orr.w	r2, r3, #32
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cea:	b662      	cpsie	i
}
 8002cec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e09a      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d1d9      	bne.n	8002cbc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d4a:	b662      	cpsie	i
}
 8002d4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d80:	e042      	b.n	8002e08 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 fb84 	bl	8003494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e04c      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d118      	bne.n	8002e08 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f47f ae94 	bne.w	8002b3a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
  }
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3728      	adds	r7, #40	; 0x28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	00010004 	.word	0x00010004
 8002e3c:	20000004 	.word	0x20000004
 8002e40:	14f8b589 	.word	0x14f8b589

08002e44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	461a      	mov	r2, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	817b      	strh	r3, [r7, #10]
 8002e56:	460b      	mov	r3, r1
 8002e58:	813b      	strh	r3, [r7, #8]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f960 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e94:	d103      	bne.n	8002e9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e05f      	b.n	8002f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ea2:	897b      	ldrh	r3, [r7, #10]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	492d      	ldr	r1, [pc, #180]	; (8002f6c <I2C_RequestMemoryWrite+0x128>)
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f9bb 	bl	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e04c      	b.n	8002f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee0:	6a39      	ldr	r1, [r7, #32]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fa46 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d107      	bne.n	8002f06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e02b      	b.n	8002f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f10:	893b      	ldrh	r3, [r7, #8]
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	611a      	str	r2, [r3, #16]
 8002f1a:	e021      	b.n	8002f60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f1c:	893b      	ldrh	r3, [r7, #8]
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	6a39      	ldr	r1, [r7, #32]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fa20 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00d      	beq.n	8002f56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d107      	bne.n	8002f52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e005      	b.n	8002f62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f56:	893b      	ldrh	r3, [r7, #8]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	00010002 	.word	0x00010002

08002f70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	4608      	mov	r0, r1
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4603      	mov	r3, r0
 8002f80:	817b      	strh	r3, [r7, #10]
 8002f82:	460b      	mov	r3, r1
 8002f84:	813b      	strh	r3, [r7, #8]
 8002f86:	4613      	mov	r3, r2
 8002f88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f8c2 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd0:	d103      	bne.n	8002fda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e0aa      	b.n	8003134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	6a3a      	ldr	r2, [r7, #32]
 8002ff2:	4952      	ldr	r1, [pc, #328]	; (800313c <I2C_RequestMemoryRead+0x1cc>)
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f91d 	bl	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e097      	b.n	8003134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301c:	6a39      	ldr	r1, [r7, #32]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f9a8 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00d      	beq.n	8003046 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b04      	cmp	r3, #4
 8003030:	d107      	bne.n	8003042 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003040:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e076      	b.n	8003134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d105      	bne.n	8003058 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800304c:	893b      	ldrh	r3, [r7, #8]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	611a      	str	r2, [r3, #16]
 8003056:	e021      	b.n	800309c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003058:	893b      	ldrh	r3, [r7, #8]
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	b29b      	uxth	r3, r3
 800305e:	b2da      	uxtb	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003068:	6a39      	ldr	r1, [r7, #32]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f982 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00d      	beq.n	8003092 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b04      	cmp	r3, #4
 800307c:	d107      	bne.n	800308e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e050      	b.n	8003134 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003092:	893b      	ldrh	r3, [r7, #8]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800309c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309e:	6a39      	ldr	r1, [r7, #32]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f967 	bl	8003374 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00d      	beq.n	80030c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d107      	bne.n	80030c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e035      	b.n	8003134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	2200      	movs	r2, #0
 80030e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f82b 	bl	8003140 <I2C_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00d      	beq.n	800310c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fe:	d103      	bne.n	8003108 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e013      	b.n	8003134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800310c:	897b      	ldrh	r3, [r7, #10]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	6a3a      	ldr	r2, [r7, #32]
 8003120:	4906      	ldr	r1, [pc, #24]	; (800313c <I2C_RequestMemoryRead+0x1cc>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f886 	bl	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	00010002 	.word	0x00010002

08003140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003150:	e048      	b.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d044      	beq.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7fe ff31 	bl	8001fc0 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d302      	bcc.n	8003170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d139      	bne.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	0c1b      	lsrs	r3, r3, #16
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10d      	bne.n	8003196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	43da      	mvns	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	e00c      	b.n	80031b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	43da      	mvns	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d116      	bne.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e023      	b.n	800322c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	0c1b      	lsrs	r3, r3, #16
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d10d      	bne.n	800320a <I2C_WaitOnFlagUntilTimeout+0xca>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	43da      	mvns	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	e00c      	b.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	43da      	mvns	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	429a      	cmp	r2, r3
 8003228:	d093      	beq.n	8003152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003242:	e071      	b.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d123      	bne.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800326c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e067      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d041      	beq.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a4:	f7fe fe8c 	bl	8001fc0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d136      	bne.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10c      	bne.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4013      	ands	r3, r2
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	e00b      	b.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	43da      	mvns	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e021      	b.n	800336c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	0c1b      	lsrs	r3, r3, #16
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d10c      	bne.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	43da      	mvns	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e00b      	b.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	43da      	mvns	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4013      	ands	r3, r2
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	bf14      	ite	ne
 800335e:	2301      	movne	r3, #1
 8003360:	2300      	moveq	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f af6d 	bne.w	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003380:	e034      	b.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f8e3 	bl	800354e <I2C_IsAcknowledgeFailed>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e034      	b.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d028      	beq.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7fe fe11 	bl	8001fc0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d11d      	bne.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b80      	cmp	r3, #128	; 0x80
 80033bc:	d016      	beq.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f043 0220 	orr.w	r2, r3, #32
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e007      	b.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	2b80      	cmp	r3, #128	; 0x80
 80033f8:	d1c3      	bne.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003410:	e034      	b.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f89b 	bl	800354e <I2C_IsAcknowledgeFailed>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e034      	b.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d028      	beq.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fe fdc9 	bl	8001fc0 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11d      	bne.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d016      	beq.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e007      	b.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b04      	cmp	r3, #4
 8003488:	d1c3      	bne.n	8003412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034a0:	e049      	b.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d119      	bne.n	80034e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0210 	mvn.w	r2, #16
 80034b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e030      	b.n	8003546 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e4:	f7fe fd6c 	bl	8001fc0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d302      	bcc.n	80034fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d11d      	bne.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d016      	beq.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e007      	b.n	8003546 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	d1ae      	bne.n	80034a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003564:	d11b      	bne.n	800359e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800356e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f043 0204 	orr.w	r2, r3, #4
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e272      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 8087 	beq.w	80036da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035cc:	4b92      	ldr	r3, [pc, #584]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d00c      	beq.n	80035f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035d8:	4b8f      	ldr	r3, [pc, #572]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 030c 	and.w	r3, r3, #12
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d112      	bne.n	800360a <HAL_RCC_OscConfig+0x5e>
 80035e4:	4b8c      	ldr	r3, [pc, #560]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d10b      	bne.n	800360a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f2:	4b89      	ldr	r3, [pc, #548]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d06c      	beq.n	80036d8 <HAL_RCC_OscConfig+0x12c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d168      	bne.n	80036d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e24c      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x76>
 8003614:	4b80      	ldr	r3, [pc, #512]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a7f      	ldr	r2, [pc, #508]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800361a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	e02e      	b.n	8003680 <HAL_RCC_OscConfig+0xd4>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0x98>
 800362a:	4b7b      	ldr	r3, [pc, #492]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7a      	ldr	r2, [pc, #488]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	4b78      	ldr	r3, [pc, #480]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a77      	ldr	r2, [pc, #476]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800363c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e01d      	b.n	8003680 <HAL_RCC_OscConfig+0xd4>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0xbc>
 800364e:	4b72      	ldr	r3, [pc, #456]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a71      	ldr	r2, [pc, #452]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	4b6f      	ldr	r3, [pc, #444]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6e      	ldr	r2, [pc, #440]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e00b      	b.n	8003680 <HAL_RCC_OscConfig+0xd4>
 8003668:	4b6b      	ldr	r3, [pc, #428]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6a      	ldr	r2, [pc, #424]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800366e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b68      	ldr	r3, [pc, #416]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a67      	ldr	r2, [pc, #412]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800367a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe fc9a 	bl	8001fc0 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003690:	f7fe fc96 	bl	8001fc0 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e200      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b5d      	ldr	r3, [pc, #372]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0xe4>
 80036ae:	e014      	b.n	80036da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fe fc86 	bl	8001fc0 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b8:	f7fe fc82 	bl	8001fc0 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1ec      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	4b53      	ldr	r3, [pc, #332]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x10c>
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d063      	beq.n	80037ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036e6:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036f2:	4b49      	ldr	r3, [pc, #292]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d11c      	bne.n	8003738 <HAL_RCC_OscConfig+0x18c>
 80036fe:	4b46      	ldr	r3, [pc, #280]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d116      	bne.n	8003738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370a:	4b43      	ldr	r3, [pc, #268]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_RCC_OscConfig+0x176>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e1c0      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003722:	4b3d      	ldr	r3, [pc, #244]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4939      	ldr	r1, [pc, #228]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003736:	e03a      	b.n	80037ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003740:	4b36      	ldr	r3, [pc, #216]	; (800381c <HAL_RCC_OscConfig+0x270>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fe fc3b 	bl	8001fc0 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374e:	f7fe fc37 	bl	8001fc0 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e1a1      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376c:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4927      	ldr	r1, [pc, #156]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]
 8003780:	e015      	b.n	80037ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003782:	4b26      	ldr	r3, [pc, #152]	; (800381c <HAL_RCC_OscConfig+0x270>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe fc1a 	bl	8001fc0 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003790:	f7fe fc16 	bl	8001fc0 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e180      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d03a      	beq.n	8003830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d019      	beq.n	80037f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_RCC_OscConfig+0x274>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c8:	f7fe fbfa 	bl	8001fc0 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d0:	f7fe fbf6 	bl	8001fc0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e160      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037ee:	2001      	movs	r0, #1
 80037f0:	f000 faba 	bl	8003d68 <RCC_Delay>
 80037f4:	e01c      	b.n	8003830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_OscConfig+0x274>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fc:	f7fe fbe0 	bl	8001fc0 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003802:	e00f      	b.n	8003824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003804:	f7fe fbdc 	bl	8001fc0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d908      	bls.n	8003824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e146      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	42420000 	.word	0x42420000
 8003820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b92      	ldr	r3, [pc, #584]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e9      	bne.n	8003804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a6 	beq.w	800398a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003842:	4b8b      	ldr	r3, [pc, #556]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10d      	bne.n	800386a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	4a87      	ldr	r2, [pc, #540]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003858:	61d3      	str	r3, [r2, #28]
 800385a:	4b85      	ldr	r3, [pc, #532]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386a:	4b82      	ldr	r3, [pc, #520]	; (8003a74 <HAL_RCC_OscConfig+0x4c8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d118      	bne.n	80038a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003876:	4b7f      	ldr	r3, [pc, #508]	; (8003a74 <HAL_RCC_OscConfig+0x4c8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a7e      	ldr	r2, [pc, #504]	; (8003a74 <HAL_RCC_OscConfig+0x4c8>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003882:	f7fe fb9d 	bl	8001fc0 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388a:	f7fe fb99 	bl	8001fc0 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b64      	cmp	r3, #100	; 0x64
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e103      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	4b75      	ldr	r3, [pc, #468]	; (8003a74 <HAL_RCC_OscConfig+0x4c8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d106      	bne.n	80038be <HAL_RCC_OscConfig+0x312>
 80038b0:	4b6f      	ldr	r3, [pc, #444]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	4a6e      	ldr	r2, [pc, #440]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6213      	str	r3, [r2, #32]
 80038bc:	e02d      	b.n	800391a <HAL_RCC_OscConfig+0x36e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x334>
 80038c6:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	4a69      	ldr	r2, [pc, #420]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	6213      	str	r3, [r2, #32]
 80038d2:	4b67      	ldr	r3, [pc, #412]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4a66      	ldr	r2, [pc, #408]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	6213      	str	r3, [r2, #32]
 80038de:	e01c      	b.n	800391a <HAL_RCC_OscConfig+0x36e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d10c      	bne.n	8003902 <HAL_RCC_OscConfig+0x356>
 80038e8:	4b61      	ldr	r3, [pc, #388]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	4a60      	ldr	r2, [pc, #384]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	6213      	str	r3, [r2, #32]
 80038f4:	4b5e      	ldr	r3, [pc, #376]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	4a5d      	ldr	r2, [pc, #372]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6213      	str	r3, [r2, #32]
 8003900:	e00b      	b.n	800391a <HAL_RCC_OscConfig+0x36e>
 8003902:	4b5b      	ldr	r3, [pc, #364]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4a5a      	ldr	r2, [pc, #360]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6213      	str	r3, [r2, #32]
 800390e:	4b58      	ldr	r3, [pc, #352]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4a57      	ldr	r2, [pc, #348]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003914:	f023 0304 	bic.w	r3, r3, #4
 8003918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d015      	beq.n	800394e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7fe fb4d 	bl	8001fc0 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fe fb49 	bl	8001fc0 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e0b1      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003940:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ee      	beq.n	800392a <HAL_RCC_OscConfig+0x37e>
 800394c:	e014      	b.n	8003978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394e:	f7fe fb37 	bl	8001fc0 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003954:	e00a      	b.n	800396c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003956:	f7fe fb33 	bl	8001fc0 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	; 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e09b      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396c:	4b40      	ldr	r3, [pc, #256]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ee      	bne.n	8003956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d105      	bne.n	800398a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397e:	4b3c      	ldr	r3, [pc, #240]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	4a3b      	ldr	r2, [pc, #236]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8087 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003994:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b08      	cmp	r3, #8
 800399e:	d061      	beq.n	8003a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d146      	bne.n	8003a36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a8:	4b33      	ldr	r3, [pc, #204]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7fe fb07 	bl	8001fc0 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b6:	f7fe fb03 	bl	8001fc0 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e06d      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c8:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f0      	bne.n	80039b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d108      	bne.n	80039f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039de:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4921      	ldr	r1, [pc, #132]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f0:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a19      	ldr	r1, [r3, #32]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	430b      	orrs	r3, r1
 8003a02:	491b      	ldr	r1, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0e:	f7fe fad7 	bl	8001fc0 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a16:	f7fe fad3 	bl	8001fc0 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e03d      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x46a>
 8003a34:	e035      	b.n	8003aa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_RCC_OscConfig+0x4cc>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fac0 	bl	8001fc0 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fe fabc 	bl	8001fc0 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e026      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x498>
 8003a62:	e01e      	b.n	8003aa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e019      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40007000 	.word	0x40007000
 8003a78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_RCC_OscConfig+0x500>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d106      	bne.n	8003a9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000

08003ab0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0d0      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac4:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d910      	bls.n	8003af4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad2:	4b67      	ldr	r3, [pc, #412]	; (8003c70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 0207 	bic.w	r2, r3, #7
 8003ada:	4965      	ldr	r1, [pc, #404]	; (8003c70 <HAL_RCC_ClockConfig+0x1c0>)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae2:	4b63      	ldr	r3, [pc, #396]	; (8003c70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0b8      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d020      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b0c:	4b59      	ldr	r3, [pc, #356]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a58      	ldr	r2, [pc, #352]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b24:	4b53      	ldr	r3, [pc, #332]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a52      	ldr	r2, [pc, #328]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b30:	4b50      	ldr	r3, [pc, #320]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	494d      	ldr	r1, [pc, #308]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d040      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d115      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e07f      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6e:	4b41      	ldr	r3, [pc, #260]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e073      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7e:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e06b      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b8e:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f023 0203 	bic.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4936      	ldr	r1, [pc, #216]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba0:	f7fe fa0e 	bl	8001fc0 <HAL_GetTick>
 8003ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba8:	f7fe fa0a 	bl	8001fc0 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e053      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 020c 	and.w	r2, r3, #12
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d1eb      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d210      	bcs.n	8003c00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <HAL_RCC_ClockConfig+0x1c0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 0207 	bic.w	r2, r3, #7
 8003be6:	4922      	ldr	r1, [pc, #136]	; (8003c70 <HAL_RCC_ClockConfig+0x1c0>)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b20      	ldr	r3, [pc, #128]	; (8003c70 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e032      	b.n	8003c66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c0c:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4916      	ldr	r1, [pc, #88]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c2a:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	490e      	ldr	r1, [pc, #56]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c3e:	f000 f821 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8003c42:	4602      	mov	r2, r0
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	490a      	ldr	r1, [pc, #40]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003c50:	5ccb      	ldrb	r3, [r1, r3]
 8003c52:	fa22 f303 	lsr.w	r3, r2, r3
 8003c56:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <HAL_RCC_ClockConfig+0x1cc>)
 8003c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_RCC_ClockConfig+0x1d0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe f96c 	bl	8001f3c <HAL_InitTick>

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40022000 	.word	0x40022000
 8003c74:	40021000 	.word	0x40021000
 8003c78:	08004e10 	.word	0x08004e10
 8003c7c:	20000004 	.word	0x20000004
 8003c80:	20000008 	.word	0x20000008

08003c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d002      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x30>
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x36>
 8003cb2:	e027      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003cb6:	613b      	str	r3, [r7, #16]
      break;
 8003cb8:	e027      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	0c9b      	lsrs	r3, r3, #18
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cc4:	5cd3      	ldrb	r3, [r2, r3]
 8003cc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d010      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cd2:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	0c5b      	lsrs	r3, r3, #17
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	4a11      	ldr	r2, [pc, #68]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cde:	5cd3      	ldrb	r3, [r2, r3]
 8003ce0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ce6:	fb03 f202 	mul.w	r2, r3, r2
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	e004      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cf8:	fb02 f303 	mul.w	r3, r2, r3
 8003cfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	613b      	str	r3, [r7, #16]
      break;
 8003d02:	e002      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003d06:	613b      	str	r3, [r7, #16]
      break;
 8003d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d0a:	693b      	ldr	r3, [r7, #16]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	007a1200 	.word	0x007a1200
 8003d20:	08004e28 	.word	0x08004e28
 8003d24:	08004e38 	.word	0x08004e38
 8003d28:	003d0900 	.word	0x003d0900

08003d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d30:	4b02      	ldr	r3, [pc, #8]	; (8003d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	20000004 	.word	0x20000004

08003d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d44:	f7ff fff2 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	4903      	ldr	r1, [pc, #12]	; (8003d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	08004e20 	.word	0x08004e20

08003d68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <RCC_Delay+0x34>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <RCC_Delay+0x38>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	0a5b      	lsrs	r3, r3, #9
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d84:	bf00      	nop
  }
  while (Delay --);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1e5a      	subs	r2, r3, #1
 8003d8a:	60fa      	str	r2, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f9      	bne.n	8003d84 <RCC_Delay+0x1c>
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	20000004 	.word	0x20000004
 8003da0:	10624dd3 	.word	0x10624dd3

08003da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e041      	b.n	8003e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fd ffd4 	bl	8001d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f000 fc30 	bl	8004648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d001      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e03a      	b.n	8003ed2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a18      	ldr	r2, [pc, #96]	; (8003edc <HAL_TIM_Base_Start_IT+0x98>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00e      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x58>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e86:	d009      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x58>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x58>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d111      	bne.n	8003ec0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d010      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebe:	e007      	b.n	8003ed0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800

08003ee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e041      	b.n	8003f7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f839 	bl	8003f86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f000 fb8e 	bl	8004648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_TIM_PWM_Start+0x24>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	e022      	b.n	8004002 <HAL_TIM_PWM_Start+0x6a>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d109      	bne.n	8003fd6 <HAL_TIM_PWM_Start+0x3e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	bf14      	ite	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	2300      	moveq	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	e015      	b.n	8004002 <HAL_TIM_PWM_Start+0x6a>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d109      	bne.n	8003ff0 <HAL_TIM_PWM_Start+0x58>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	bf14      	ite	ne
 8003fe8:	2301      	movne	r3, #1
 8003fea:	2300      	moveq	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e008      	b.n	8004002 <HAL_TIM_PWM_Start+0x6a>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e05e      	b.n	80040c8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d104      	bne.n	800401a <HAL_TIM_PWM_Start+0x82>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004018:	e013      	b.n	8004042 <HAL_TIM_PWM_Start+0xaa>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b04      	cmp	r3, #4
 800401e:	d104      	bne.n	800402a <HAL_TIM_PWM_Start+0x92>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004028:	e00b      	b.n	8004042 <HAL_TIM_PWM_Start+0xaa>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d104      	bne.n	800403a <HAL_TIM_PWM_Start+0xa2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004038:	e003      	b.n	8004042 <HAL_TIM_PWM_Start+0xaa>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	6839      	ldr	r1, [r7, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fd7c 	bl	8004b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <HAL_TIM_PWM_Start+0x138>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d107      	bne.n	800406a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a18      	ldr	r2, [pc, #96]	; (80040d0 <HAL_TIM_PWM_Start+0x138>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00e      	beq.n	8004092 <HAL_TIM_PWM_Start+0xfa>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407c:	d009      	beq.n	8004092 <HAL_TIM_PWM_Start+0xfa>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <HAL_TIM_PWM_Start+0x13c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d004      	beq.n	8004092 <HAL_TIM_PWM_Start+0xfa>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <HAL_TIM_PWM_Start+0x140>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d111      	bne.n	80040b6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b06      	cmp	r3, #6
 80040a2:	d010      	beq.n	80040c6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b4:	e007      	b.n	80040c6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800

080040dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d122      	bne.n	8004138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d11b      	bne.n	8004138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0202 	mvn.w	r2, #2
 8004108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fa76 	bl	8004610 <HAL_TIM_IC_CaptureCallback>
 8004124:	e005      	b.n	8004132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fa69 	bl	80045fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fa78 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b04      	cmp	r3, #4
 8004144:	d122      	bne.n	800418c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b04      	cmp	r3, #4
 8004152:	d11b      	bne.n	800418c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0204 	mvn.w	r2, #4
 800415c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2202      	movs	r2, #2
 8004162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa4c 	bl	8004610 <HAL_TIM_IC_CaptureCallback>
 8004178:	e005      	b.n	8004186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa3f 	bl	80045fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fa4e 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b08      	cmp	r3, #8
 8004198:	d122      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d11b      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0208 	mvn.w	r2, #8
 80041b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2204      	movs	r2, #4
 80041b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa22 	bl	8004610 <HAL_TIM_IC_CaptureCallback>
 80041cc:	e005      	b.n	80041da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fa15 	bl	80045fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fa24 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0310 	and.w	r3, r3, #16
 80041ea:	2b10      	cmp	r3, #16
 80041ec:	d122      	bne.n	8004234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d11b      	bne.n	8004234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0210 	mvn.w	r2, #16
 8004204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2208      	movs	r2, #8
 800420a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f9f8 	bl	8004610 <HAL_TIM_IC_CaptureCallback>
 8004220:	e005      	b.n	800422e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f9eb 	bl	80045fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f9fa 	bl	8004622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b01      	cmp	r3, #1
 8004240:	d10e      	bne.n	8004260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d107      	bne.n	8004260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0201 	mvn.w	r2, #1
 8004258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fd fa00 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b80      	cmp	r3, #128	; 0x80
 800426c:	d10e      	bne.n	800428c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	2b80      	cmp	r3, #128	; 0x80
 800427a:	d107      	bne.n	800428c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fd3a 	bl	8004d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b40      	cmp	r3, #64	; 0x40
 8004298:	d10e      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	d107      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f9be 	bl	8004634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d10e      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d107      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0220 	mvn.w	r2, #32
 80042dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fd05 	bl	8004cee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004306:	2302      	movs	r3, #2
 8004308:	e0ae      	b.n	8004468 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b0c      	cmp	r3, #12
 8004316:	f200 809f 	bhi.w	8004458 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800431a:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004355 	.word	0x08004355
 8004324:	08004459 	.word	0x08004459
 8004328:	08004459 	.word	0x08004459
 800432c:	08004459 	.word	0x08004459
 8004330:	08004395 	.word	0x08004395
 8004334:	08004459 	.word	0x08004459
 8004338:	08004459 	.word	0x08004459
 800433c:	08004459 	.word	0x08004459
 8004340:	080043d7 	.word	0x080043d7
 8004344:	08004459 	.word	0x08004459
 8004348:	08004459 	.word	0x08004459
 800434c:	08004459 	.word	0x08004459
 8004350:	08004417 	.word	0x08004417
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f9d6 	bl	800470c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0208 	orr.w	r2, r2, #8
 800436e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0204 	bic.w	r2, r2, #4
 800437e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6999      	ldr	r1, [r3, #24]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	619a      	str	r2, [r3, #24]
      break;
 8004392:	e064      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fa1c 	bl	80047d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6999      	ldr	r1, [r3, #24]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	021a      	lsls	r2, r3, #8
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	619a      	str	r2, [r3, #24]
      break;
 80043d4:	e043      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fa65 	bl	80048ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0208 	orr.w	r2, r2, #8
 80043f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0204 	bic.w	r2, r2, #4
 8004400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69d9      	ldr	r1, [r3, #28]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	61da      	str	r2, [r3, #28]
      break;
 8004414:	e023      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 faaf 	bl	8004980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69d9      	ldr	r1, [r3, #28]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	021a      	lsls	r2, r3, #8
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	61da      	str	r2, [r3, #28]
      break;
 8004456:	e002      	b.n	800445e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	75fb      	strb	r3, [r7, #23]
      break;
 800445c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004466:	7dfb      	ldrb	r3, [r7, #23]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_TIM_ConfigClockSource+0x1c>
 8004488:	2302      	movs	r3, #2
 800448a:	e0b4      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x186>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c4:	d03e      	beq.n	8004544 <HAL_TIM_ConfigClockSource+0xd4>
 80044c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ca:	f200 8087 	bhi.w	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d2:	f000 8086 	beq.w	80045e2 <HAL_TIM_ConfigClockSource+0x172>
 80044d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044da:	d87f      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044dc:	2b70      	cmp	r3, #112	; 0x70
 80044de:	d01a      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0xa6>
 80044e0:	2b70      	cmp	r3, #112	; 0x70
 80044e2:	d87b      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044e4:	2b60      	cmp	r3, #96	; 0x60
 80044e6:	d050      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x11a>
 80044e8:	2b60      	cmp	r3, #96	; 0x60
 80044ea:	d877      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044ec:	2b50      	cmp	r3, #80	; 0x50
 80044ee:	d03c      	beq.n	800456a <HAL_TIM_ConfigClockSource+0xfa>
 80044f0:	2b50      	cmp	r3, #80	; 0x50
 80044f2:	d873      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d058      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x13a>
 80044f8:	2b40      	cmp	r3, #64	; 0x40
 80044fa:	d86f      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 80044fc:	2b30      	cmp	r3, #48	; 0x30
 80044fe:	d064      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15a>
 8004500:	2b30      	cmp	r3, #48	; 0x30
 8004502:	d86b      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	2b20      	cmp	r3, #32
 8004506:	d060      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15a>
 8004508:	2b20      	cmp	r3, #32
 800450a:	d867      	bhi.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d05c      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15a>
 8004510:	2b10      	cmp	r3, #16
 8004512:	d05a      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x15a>
 8004514:	e062      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004526:	f000 faf0 	bl	8004b0a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	609a      	str	r2, [r3, #8]
      break;
 8004542:	e04f      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004554:	f000 fad9 	bl	8004b0a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004566:	609a      	str	r2, [r3, #8]
      break;
 8004568:	e03c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004576:	461a      	mov	r2, r3
 8004578:	f000 fa50 	bl	8004a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2150      	movs	r1, #80	; 0x50
 8004582:	4618      	mov	r0, r3
 8004584:	f000 faa7 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 8004588:	e02c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004596:	461a      	mov	r2, r3
 8004598:	f000 fa6e 	bl	8004a78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2160      	movs	r1, #96	; 0x60
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fa97 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 80045a8:	e01c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b6:	461a      	mov	r2, r3
 80045b8:	f000 fa30 	bl	8004a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2140      	movs	r1, #64	; 0x40
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fa87 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 80045c8:	e00c      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f000 fa7e 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 80045da:	e003      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      break;
 80045e0:	e000      	b.n	80045e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
	...

08004648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a29      	ldr	r2, [pc, #164]	; (8004700 <TIM_Base_SetConfig+0xb8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00b      	beq.n	8004678 <TIM_Base_SetConfig+0x30>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004666:	d007      	beq.n	8004678 <TIM_Base_SetConfig+0x30>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a26      	ldr	r2, [pc, #152]	; (8004704 <TIM_Base_SetConfig+0xbc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_Base_SetConfig+0x30>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a25      	ldr	r2, [pc, #148]	; (8004708 <TIM_Base_SetConfig+0xc0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d108      	bne.n	800468a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a1c      	ldr	r2, [pc, #112]	; (8004700 <TIM_Base_SetConfig+0xb8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00b      	beq.n	80046aa <TIM_Base_SetConfig+0x62>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004698:	d007      	beq.n	80046aa <TIM_Base_SetConfig+0x62>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a19      	ldr	r2, [pc, #100]	; (8004704 <TIM_Base_SetConfig+0xbc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d003      	beq.n	80046aa <TIM_Base_SetConfig+0x62>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <TIM_Base_SetConfig+0xc0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d108      	bne.n	80046bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a07      	ldr	r2, [pc, #28]	; (8004700 <TIM_Base_SetConfig+0xb8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d103      	bne.n	80046f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	615a      	str	r2, [r3, #20]
}
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr
 8004700:	40012c00 	.word	0x40012c00
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800

0800470c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f023 0201 	bic.w	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0303 	bic.w	r3, r3, #3
 8004742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 0302 	bic.w	r3, r3, #2
 8004754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a1c      	ldr	r2, [pc, #112]	; (80047d4 <TIM_OC1_SetConfig+0xc8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d10c      	bne.n	8004782 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f023 0308 	bic.w	r3, r3, #8
 800476e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f023 0304 	bic.w	r3, r3, #4
 8004780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <TIM_OC1_SetConfig+0xc8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d111      	bne.n	80047ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	621a      	str	r2, [r3, #32]
}
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40012c00 	.word	0x40012c00

080047d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f023 0210 	bic.w	r2, r3, #16
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f023 0320 	bic.w	r3, r3, #32
 8004822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <TIM_OC2_SetConfig+0xd0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d10d      	bne.n	8004854 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800483e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <TIM_OC2_SetConfig+0xd0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d113      	bne.n	8004884 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800486a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	621a      	str	r2, [r3, #32]
}
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	40012c00 	.word	0x40012c00

080048ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1d      	ldr	r2, [pc, #116]	; (800497c <TIM_OC3_SetConfig+0xd0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d10d      	bne.n	8004926 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a14      	ldr	r2, [pc, #80]	; (800497c <TIM_OC3_SetConfig+0xd0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d113      	bne.n	8004956 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800493c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	621a      	str	r2, [r3, #32]
}
 8004970:	bf00      	nop
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00

08004980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	031b      	lsls	r3, r3, #12
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a0f      	ldr	r2, [pc, #60]	; (8004a18 <TIM_OC4_SetConfig+0x98>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d109      	bne.n	80049f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	019b      	lsls	r3, r3, #6
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	40012c00 	.word	0x40012c00

08004a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f023 0201 	bic.w	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f023 030a 	bic.w	r3, r3, #10
 8004a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f023 0210 	bic.w	r2, r3, #16
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	031b      	lsls	r3, r3, #12
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	621a      	str	r2, [r3, #32]
}
 8004acc:	bf00      	nop
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f043 0307 	orr.w	r3, r3, #7
 8004af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	609a      	str	r2, [r3, #8]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr

08004b0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b087      	sub	sp, #28
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	021a      	lsls	r2, r3, #8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	609a      	str	r2, [r3, #8]
}
 8004b3e:	bf00      	nop
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1a      	ldr	r2, [r3, #32]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1a      	ldr	r2, [r3, #32]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	431a      	orrs	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	621a      	str	r2, [r3, #32]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e046      	b.n	8004c36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf4:	d009      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a12      	ldr	r2, [pc, #72]	; (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a10      	ldr	r2, [pc, #64]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d10c      	bne.n	8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800

08004c4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c64:	2302      	movs	r3, #2
 8004c66:	e03d      	b.n	8004ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr

08004cee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
	...

08004d14 <round>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004d1a:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 8004d1e:	2a13      	cmp	r2, #19
 8004d20:	460b      	mov	r3, r1
 8004d22:	4605      	mov	r5, r0
 8004d24:	460c      	mov	r4, r1
 8004d26:	dc18      	bgt.n	8004d5a <round+0x46>
 8004d28:	2a00      	cmp	r2, #0
 8004d2a:	da09      	bge.n	8004d40 <round+0x2c>
 8004d2c:	3201      	adds	r2, #1
 8004d2e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004d32:	d103      	bne.n	8004d3c <round+0x28>
 8004d34:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004d38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	e029      	b.n	8004d94 <round+0x80>
 8004d40:	4816      	ldr	r0, [pc, #88]	; (8004d9c <round+0x88>)
 8004d42:	4110      	asrs	r0, r2
 8004d44:	4001      	ands	r1, r0
 8004d46:	4329      	orrs	r1, r5
 8004d48:	d011      	beq.n	8004d6e <round+0x5a>
 8004d4a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004d4e:	fa41 f202 	asr.w	r2, r1, r2
 8004d52:	4413      	add	r3, r2
 8004d54:	ea23 0300 	bic.w	r3, r3, r0
 8004d58:	e7f0      	b.n	8004d3c <round+0x28>
 8004d5a:	2a33      	cmp	r2, #51	; 0x33
 8004d5c:	dd0a      	ble.n	8004d74 <round+0x60>
 8004d5e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004d62:	d104      	bne.n	8004d6e <round+0x5a>
 8004d64:	4602      	mov	r2, r0
 8004d66:	f7fb f9f9 	bl	800015c <__adddf3>
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	4628      	mov	r0, r5
 8004d70:	4621      	mov	r1, r4
 8004d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d74:	f04f 30ff 	mov.w	r0, #4294967295
 8004d78:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004d7c:	40f8      	lsrs	r0, r7
 8004d7e:	4228      	tst	r0, r5
 8004d80:	d0f5      	beq.n	8004d6e <round+0x5a>
 8004d82:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8004d86:	2201      	movs	r2, #1
 8004d88:	408a      	lsls	r2, r1
 8004d8a:	1952      	adds	r2, r2, r5
 8004d8c:	bf28      	it	cs
 8004d8e:	3301      	addcs	r3, #1
 8004d90:	ea22 0200 	bic.w	r2, r2, r0
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	e7e7      	b.n	8004d6a <round+0x56>
 8004d9a:	bf00      	nop
 8004d9c:	000fffff 	.word	0x000fffff

08004da0 <memset>:
 8004da0:	4603      	mov	r3, r0
 8004da2:	4402      	add	r2, r0
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d100      	bne.n	8004daa <memset+0xa>
 8004da8:	4770      	bx	lr
 8004daa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dae:	e7f9      	b.n	8004da4 <memset+0x4>

08004db0 <__libc_init_array>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	2600      	movs	r6, #0
 8004db4:	4d0c      	ldr	r5, [pc, #48]	; (8004de8 <__libc_init_array+0x38>)
 8004db6:	4c0d      	ldr	r4, [pc, #52]	; (8004dec <__libc_init_array+0x3c>)
 8004db8:	1b64      	subs	r4, r4, r5
 8004dba:	10a4      	asrs	r4, r4, #2
 8004dbc:	42a6      	cmp	r6, r4
 8004dbe:	d109      	bne.n	8004dd4 <__libc_init_array+0x24>
 8004dc0:	f000 f81a 	bl	8004df8 <_init>
 8004dc4:	2600      	movs	r6, #0
 8004dc6:	4d0a      	ldr	r5, [pc, #40]	; (8004df0 <__libc_init_array+0x40>)
 8004dc8:	4c0a      	ldr	r4, [pc, #40]	; (8004df4 <__libc_init_array+0x44>)
 8004dca:	1b64      	subs	r4, r4, r5
 8004dcc:	10a4      	asrs	r4, r4, #2
 8004dce:	42a6      	cmp	r6, r4
 8004dd0:	d105      	bne.n	8004dde <__libc_init_array+0x2e>
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd8:	4798      	blx	r3
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7ee      	b.n	8004dbc <__libc_init_array+0xc>
 8004dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de2:	4798      	blx	r3
 8004de4:	3601      	adds	r6, #1
 8004de6:	e7f2      	b.n	8004dce <__libc_init_array+0x1e>
 8004de8:	08004e3c 	.word	0x08004e3c
 8004dec:	08004e3c 	.word	0x08004e3c
 8004df0:	08004e3c 	.word	0x08004e3c
 8004df4:	08004e44 	.word	0x08004e44

08004df8 <_init>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

08004e04 <_fini>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr
